68
IDENTIFIER
INTEGER_LITERAL
BOOLEAN_LITERAL
CHARACTER_LITERAL
STRING_LITERAL
NULL_LITERAL
!
%
&
&&
(
)
*
+
++
,
-
--
.
/
:
;
<
<<
=
!=
<=
>=
==
>
?
ABSTRACT
BOOLEAN
BYTE
CHAR
CLASS
ELSE
EXTENDS
FINAL
FOR
IF
IMPLEMENTS
IMPORT
INSTANCEOF
INT
INTERFACE
NATIVE
NEW

PACKAGE
PRIVATE
PROTECTED
PUBLIC
RETURN
SHORT
STATIC
SUPER
THIS
VOID
WHILE
[
]
^
{
|
||
}
~
102
compilation_unit
method_declarator
constructor_declarator
abstract_method_declaration
additive_expression
and_expression
argument_list
array_access
array_creation_expression
array_type
assignment
assignment_expression
assignment_operator
block
block_statement
block_statements
cast_expression
class_body
class_body_declaration
class_body_declarations
class_declaration
class_instance_creation_expression
class_member_declaration
class_or_interface_type
class_type
conditional_and_expression
conditional_expression
conditional_or_expression
constant_expression
constructor_declaration
dim_expr
dim_exprs
dims
dims_opt
empty_statement
equality_expression
exclusive_or_expression
expression
expression_opt
expression_statement
extends_interfaces
field_access
field_declaration
for_init
for_statement
for_statement_no_short_if
for_update
formal_parameter
formal_parameter_list
if_then_else_statement
if_then_else_statement_no_short_if
if_then_statement
import_declaration
import_declarations
inclusive_or_expression
integral_type
interface_body
interface_declaration
interface_member_declaration
interface_member_declarations
interface_type
interface_type_list
interfaces
left_hand_side
literal
local_variable_declaration
local_variable_declaration_statement
method_body
method_declaration
method_header
method_invocation
modifier
modifiers
multiplicative_expression
name
numeric_type
package_declaration
postfix_expression
primary
primary_no_new_array
primitive_type
qualified_name
reference_type
relational_expression
return_statement
simple_name
single_type_import_declaration
statement
statement_expression
statement_no_short_if
statement_without_trailing_substatement
super
type
type_declaration
type_import_on_demand_declaration
unary_expression
unary_expression_not_plus_minus
variable_declarator
variable_declarator_id
variable_initializer
while_statement
while_statement_no_short_if
compilation_unit
203
literal INTEGER_LITERAL
literal BOOLEAN_LITERAL
literal CHARACTER_LITERAL
literal STRING_LITERAL
literal NULL_LITERAL
type primitive_type
type reference_type
primitive_type numeric_type
primitive_type BOOLEAN
numeric_type integral_type
integral_type BYTE
integral_type SHORT
integral_type INT
integral_type CHAR
reference_type class_or_interface_type
reference_type array_type
class_or_interface_type name
class_type class_or_interface_type
interface_type class_or_interface_type
array_type primitive_type [ ]
array_type name [ ]
array_type array_type [ ]
name simple_name
name qualified_name
simple_name IDENTIFIER
qualified_name name . IDENTIFIER
compilation_unit package_declaration import_declarations type_declaration
import_declarations
import_declarations import_declarations import_declaration
package_declaration
package_declaration PACKAGE name ;
import_declaration single_type_import_declaration
import_declaration type_import_on_demand_declaration
single_type_import_declaration IMPORT name ;
type_import_on_demand_declaration IMPORT name . * ;
type_declaration
type_declaration class_declaration
type_declaration interface_declaration
type_declaration ;
modifiers
modifiers modifiers modifier
modifier PUBLIC
modifier PROTECTED
modifier PRIVATE
modifier STATIC
modifier ABSTRACT
modifier FINAL
modifier NATIVE
class_declaration modifiers CLASS IDENTIFIER super interfaces class_body
super
super EXTENDS class_type
interfaces
interfaces IMPLEMENTS interface_type_list
interface_type_list interface_type
interface_type_list interface_type_list , interface_type
class_body { class_body_declarations }
class_body_declarations
class_body_declarations class_body_declarations class_body_declaration
class_body_declaration class_member_declaration
class_body_declaration constructor_declaration
class_member_declaration field_declaration
class_member_declaration method_declaration
field_declaration modifiers type variable_declarator ;
variable_declarator variable_declarator_id
variable_declarator variable_declarator_id = variable_initializer
variable_declarator_id IDENTIFIER
variable_initializer expression
method_declaration method_header method_body
method_header modifiers type method_declarator
method_header modifiers VOID method_declarator
method_declarator IDENTIFIER ( formal_parameter_list )
formal_parameter_list
formal_parameter_list formal_parameter
formal_parameter_list formal_parameter_list , formal_parameter
formal_parameter type variable_declarator_id
method_body block
method_body ;
constructor_declaration modifiers constructor_declarator block
constructor_declarator simple_name ( formal_parameter_list )
interface_declaration modifiers INTERFACE IDENTIFIER extends_interfaces interface_body
extends_interfaces
extends_interfaces EXTENDS interface_type
extends_interfaces extends_interfaces , interface_type
interface_body { interface_member_declarations }
interface_member_declarations
interface_member_declarations interface_member_declarations interface_member_declaration
interface_member_declaration abstract_method_declaration
abstract_method_declaration method_header ;
block { block_statements }
block_statements
block_statements block_statements block_statement
block_statement local_variable_declaration_statement
block_statement statement
local_variable_declaration_statement local_variable_declaration ;
local_variable_declaration type variable_declarator
statement statement_without_trailing_substatement
statement if_then_statement
statement if_then_else_statement
statement while_statement
statement for_statement
statement_no_short_if statement_without_trailing_substatement
statement_no_short_if if_then_else_statement_no_short_if
statement_no_short_if while_statement_no_short_if
statement_no_short_if for_statement_no_short_if
statement_without_trailing_substatement block
statement_without_trailing_substatement empty_statement
statement_without_trailing_substatement expression_statement
statement_without_trailing_substatement return_statement
empty_statement ;
expression_statement statement_expression ;
statement_expression assignment
statement_expression method_invocation
statement_expression class_instance_creation_expression
if_then_statement IF ( expression ) statement
if_then_else_statement IF ( expression ) statement_no_short_if ELSE statement
if_then_else_statement_no_short_if IF ( expression ) statement_no_short_if ELSE statement_no_short_if
while_statement WHILE ( expression ) statement
while_statement_no_short_if WHILE ( expression ) statement_no_short_if
for_statement FOR ( for_init ; expression_opt ; for_update ) statement
for_statement_no_short_if FOR ( for_init ; expression_opt ; for_update ) statement_no_short_if
expression_opt
expression_opt expression
for_init
for_init statement_expression
for_init local_variable_declaration
for_update
for_update statement_expression
return_statement RETURN expression_opt ;
primary primary_no_new_array
primary array_creation_expression
primary_no_new_array literal
primary_no_new_array THIS
primary_no_new_array ( expression )
primary_no_new_array class_instance_creation_expression
primary_no_new_array field_access
primary_no_new_array method_invocation
primary_no_new_array array_access
class_instance_creation_expression NEW class_type ( argument_list )
argument_list
argument_list argument_list , expression
argument_list expression
array_creation_expression NEW primitive_type dim_exprs dims_opt
array_creation_expression NEW class_or_interface_type dim_exprs dims_opt
dim_exprs dim_expr
dim_exprs dim_exprs dim_expr
dim_expr [ expression ]
dims [ ]
dims dims [ ]
field_access primary . IDENTIFIER
method_invocation name ( argument_list )
method_invocation primary . IDENTIFIER ( argument_list )
array_access name [ expression ]
array_access primary_no_new_array [ expression ]
postfix_expression primary
postfix_expression name
unary_expression + unary_expression
unary_expression - unary_expression
unary_expression unary_expression_not_plus_minus
unary_expression_not_plus_minus postfix_expression
unary_expression_not_plus_minus ~ unary_expression
unary_expression_not_plus_minus ! unary_expression
unary_expression_not_plus_minus cast_expression
cast_expression ( primitive_type dims_opt ) unary_expression
cast_expression ( expression ) unary_expression_not_plus_minus
cast_expression ( name dims ) unary_expression_not_plus_minus
dims_opt dims
dims_opt
multiplicative_expression unary_expression
multiplicative_expression multiplicative_expression * unary_expression
multiplicative_expression multiplicative_expression / unary_expression
multiplicative_expression multiplicative_expression % unary_expression
additive_expression multiplicative_expression
additive_expression additive_expression + multiplicative_expression
additive_expression additive_expression - multiplicative_expression
relational_expression relational_expression < additive_expression
relational_expression relational_expression > additive_expression
relational_expression relational_expression <= additive_expression
relational_expression relational_expression >= additive_expression
relational_expression relational_expression INSTANCEOF reference_type
equality_expression relational_expression
equality_expression equality_expression == relational_expression
equality_expression equality_expression != relational_expression
and_expression equality_expression
and_expression and_expression & equality_expression
exclusive_or_expression and_expression
exclusive_or_expression exclusive_or_expression ^ and_expression
inclusive_or_expression exclusive_or_expression
inclusive_or_expression exclusive_or_expression | exclusive_or_expression
conditional_and_expression inclusive_or_expression
conditional_and_expression conditional_and_expression && inclusive_or_expression
conditional_or_expression conditional_and_expression
conditional_or_expression conditional_or_expression || conditional_and_expression
conditional_expression conditional_or_expression
conditional_expression conditional_or_expression ? expression : conditional_expression
assignment_expression conditional_expression
assignment_expression assignment
assignment left_hand_side assignment_operator assignment_expression
left_hand_side name
left_hand_side field_access
left_hand_side array_access
assignment_operator =
expression assignment_expression
constant_expression expression
344
4895
40 equality_expression shift 1
258 PRIVATE reduce 41
95 BOOLEAN_LITERAL reduce 118
132 SHORT reduce 75
276 { reduce 50
88 { reduce 108
268 ABSTRACT shift 2
88 } reduce 108
241 && reduce 167
301 expression shift 3
55 & reduce 3
304 for_statement_no_short_if shift 4
55 ) reduce 3
325 statement_without_trailing_substatement shift 5
333 ( shift 6
55 % reduce 3
20 [ reduce 136
304 left_hand_side shift 7
20 ^ reduce 136
20 ] reduce 136
305 / reduce 155
305 - reduce 155
321 NEW shift 8
94 SHORT reduce 56
55 / reduce 3
55 . reduce 3
138 IF reduce 107
305 % reduce 155
305 & reduce 155
305 + reduce 155
55 + reduce 3
305 , reduce 155
55 * reduce 3
185 ] shift 9
305 ) reduce 155
55 - reduce 3
305 * reduce 155
55 , reduce 3
322 exclusive_or_expression shift 10
17 INSTANCEOF reduce 2
55 ? reduce 3
90 INTEGER_LITERAL shift 11
20 ? reduce 136
55 > reduce 3
288 IDENTIFIER reduce 79
20 < reduce 136
55 ; reduce 3
20 ; reduce 136
55 : reduce 3
20 > reduce 136
55 < reduce 3
20 : reduce 136
341 THIS reduce 200
143 primary_no_new_array shift 12
258 PUBLIC reduce 41
56 INSTANCEOF reduce 129
87 simple_name shift 13
213 == reduce 164
20 / reduce 136
127 statement_expression shift 14
20 , reduce 136
20 + reduce 136
253 equality_expression shift 1
20 . reduce 136
224 IDENTIFIER reduce 88
253 IDENTIFIER shift 15
20 - reduce 136
305 ? reduce 155
20 * reduce 136
191 THIS shift 16
305 > reduce 155
20 ) reduce 136
20 & reduce 136
164 CLASS reduce 34
20 % reduce 136
305 ; reduce 155
305 < reduce 155
255 THIS reduce 92
305 : reduce 155
76 || reduce 154
210 , reduce 71
213 >= reduce 164
96 CHARACTER_LITERAL shift 17
321 class_instance_creation_expression shift 18
210 ) reduce 71
277 RETURN reduce 93
95 CHAR reduce 118
279 interface_member_declaration shift 19
297 FINAL reduce 57
249 array_access shift 20
222 primary shift 21
305 ] reduce 155
234 != reduce 181
305 ^ reduce 155
206 ( shift 22
226 and_expression shift 23
244 CHAR reduce 42
198 for_statement_no_short_if shift 4
323 qualified_name shift 24
245 SHORT shift 25
33 CHAR reduce 77
241 != reduce 167
226 assignment shift 26
274 qualified_name shift 24
322 assignment shift 26
100 postfix_expression shift 27
253 conditional_or_expression shift 28
8 BOOLEAN shift 29
143 variable_initializer shift 30
267 name shift 31
70 field_access shift 32
229 block shift 33
138 BOOLEAN reduce 107
191 primary_no_new_array shift 12
114 * reduce 143
303 class_instance_creation_expression shift 18
114 + reduce 143
114 ) reduce 143
114 & reduce 143
154 BYTE reduce 114
213 <= reduce 164
142 BOOLEAN reduce 105
114 % reduce 143
307 CHARACTER_LITERAL shift 17
258 PROTECTED reduce 41
124 primary shift 34
114 . reduce 143
114 / reduce 143
114 , reduce 143
114 - reduce 143
89 BOOLEAN_LITERAL shift 35
64 method_invocation shift 36
323 FINAL shift 37
225 CHAR reduce 99
210 formal_parameter_list shift 38
322 CHARACTER_LITERAL shift 17
223 THIS shift 16
133 [ reduce 137
335 NATIVE reduce 87
258 INTERFACE reduce 41
253 argument_list shift 39
133 ] reduce 137
133 ^ reduce 137
266 field_access shift 32
226 exclusive_or_expression shift 10
209 [ shift 40
55 ^ reduce 3
274 if_then_else_statement shift 41
322 and_expression shift 23
55 [ reduce 3
249 qualified_name shift 24
55 ] reduce 3
127 primary shift 34
252 qualified_name shift 24
142 CHARACTER_LITERAL reduce 105
106 ( shift 42
106 + shift 43
133 | reduce 137
106 - shift 44
282 SHORT shift 25
248 CHARACTER_LITERAL reduce 109
198 left_hand_side shift 7
223 primary_no_new_array shift 12
88 RETURN reduce 108
282 primary_no_new_array shift 12
178 INSTANCEOF reduce 144
313 block shift 45
79 [ reduce 9
258 BYTE reduce 41
333 primary shift 34
138 CHARACTER_LITERAL reduce 107
275 FINAL reduce 61
231 IMPORT reduce 33
303 NEW shift 8
253 inclusive_or_expression shift 46
78 INTEGER_LITERAL shift 11
20 | reduce 136
143 THIS shift 16
106 ! shift 47
234 && reduce 181
227 CHARACTER_LITERAL shift 17
55 | reduce 3
87 conditional_expression shift 48
263 block shift 45
302 BOOLEAN reduce 76
79 ) reduce 9
267 relational_expression shift 49
223 array_access shift 50
143 CHARACTER_LITERAL shift 17
75 ] shift 51
250 qualified_name shift 24
83 ; reduce 159
53 && reduce 4
83 : reduce 159
294 INSTANCEOF reduce 160
336 FOR reduce 127
2 FINAL reduce 45
214 FINAL reduce 62
216 CHAR shift 52
100 NULL_LITERAL shift 53
153 INTERFACE reduce 39
83 < reduce 159
83 ? reduce 159
83 > reduce 159
83 ) reduce 159
225 BOOLEAN_LITERAL reduce 99
24 { reduce 23
83 + reduce 159
83 * reduce 159
109 >= reduce 21
83 % reduce 159
83 & reduce 159
248 SHORT reduce 109
41 FOR reduce 97
45 CHAR reduce 104
134 simple_name shift 13
92 array_access shift 20
83 - reduce 159
64 field_access shift 54
169 primary shift 34
24 | reduce 23
83 , reduce 159
83 / reduce 159
202 ( shift 6
321 STRING_LITERAL shift 55
225 STRING_LITERAL reduce 99
202 array_creation_expression shift 56
239 INTEGER_LITERAL shift 11
274 NULL_LITERAL shift 53
169 array_creation_expression shift 56
301 conditional_or_expression shift 28
92 postfix_expression shift 27
21 != reduce 153
223 NULL_LITERAL shift 53
226 CHARACTER_LITERAL shift 17
109 == reduce 21
77 CHARACTER_LITERAL reduce 98
314 constructor_declaration shift 57
192 FINAL reduce 32
40 conditional_or_expression shift 28
222 % reduce 132
204 CLASS reduce 43
222 ! shift 47
44 unary_expression shift 58
335 IDENTIFIER reduce 87
83 | reduce 159
153 NATIVE reduce 39
134 literal shift 59
250 array_access shift 50
202 ] shift 60
222 < reduce 132
222 : reduce 132
222 ; reduce 132
109 <= reduce 21
325 INTEGER_LITERAL shift 11
106 array_creation_expression shift 56
5 INTEGER_LITERAL reduce 95
105 IDENTIFIER shift 15
222 > reduce 132
179 simple_name shift 13
136 primary shift 34
222 ? reduce 132
137 && reduce 15
222 , reduce 132
222 - reduce 132
222 * reduce 132
222 + reduce 132
195 reference_type shift 61
222 ( shift 42
44 cast_expression shift 62
222 ) reduce 132
279 PUBLIC reduce 39
222 & reduce 132
313 array_creation_expression shift 56
92 primary_no_new_array shift 12
313 statement_expression shift 14
83 ] reduce 159
222 . reduce 132
222 / reduce 132
83 ^ reduce 159
224 NATIVE reduce 88
222 ] reduce 132
6 NEW shift 8
222 [ reduce 132
44 literal shift 59
40 IDENTIFIER shift 15
222 ^ reduce 132
191 array_access shift 50
336 WHILE reduce 127
248 IF reduce 109
45 BOOLEAN_LITERAL reduce 104
214 SHORT reduce 62
22 class_or_interface_type shift 63
222 | reduce 132
153 PRIVATE reduce 39
274 array_access shift 50
66 ; reduce 110
222 ~ shift 64
42 primitive_type shift 65
169 ( shift 6
92 NULL_LITERAL shift 53
66 ) reduce 110
169 , reduce 138
169 ) reduce 138
92 THIS shift 16
45 STRING_LITERAL reduce 104
43 BOOLEAN_LITERAL shift 35
0 STATIC reduce 29
207 FINAL reduce 84
198 STRING_LITERAL shift 55
106 primary shift 21
24 [ reduce 23
263 IDENTIFIER shift 15
198 BOOLEAN_LITERAL shift 35
103 } reduce 60
153 PROTECTED reduce 39
132 BOOLEAN reduce 75
88 ; reduce 108
226 left_hand_side shift 7
24 ] reduce 23
313 primary shift 34
24 ^ reduce 23
304 assignment shift 66
244 ABSTRACT reduce 42
137 != reduce 15
191 NULL_LITERAL shift 53
88 ( reduce 108
240 FINAL reduce 86
304 STRING_LITERAL shift 55
24 ; reduce 23
24 : reduce 23
304 BOOLEAN_LITERAL shift 35
253 expression shift 67
191 CHARACTER_LITERAL shift 17
198 assignment shift 66
77 THIS reduce 98
301 array_creation_expression shift 56
24 = reduce 23
24 < reduce 23
24 ? reduce 23
24 > reduce 23
24 ) reduce 23
127 block shift 45
24 ( reduce 23
24 + reduce 23
24 * reduce 23
282 assignment shift 66
24 % reduce 23
24 & reduce 23
95 STRING_LITERAL reduce 118
226 primary_no_new_array shift 12
24 - reduce 23
299 && reduce 189
24 , reduce 23
136 statement_expression shift 68
24 / reduce 23
24 . reduce 23
174 and_expression shift 23
100 THIS shift 16
315 class_instance_creation_expression shift 18
82 NULL_LITERAL reduce 106
58 | reduce 156
57 STATIC reduce 59
118 STATIC reduce 40
322 primary_no_new_array shift 12
108 [ shift 69
169 expression shift 67
307 BOOLEAN_LITERAL shift 35
108 ] reduce 16
108 ^ reduce 16
170 ( shift 70
274 THIS shift 16
109 && reduce 21
106 multiplicative_expression shift 71
170 . shift 72
134 conditional_and_expression shift 73
279 PROTECTED reduce 39
43 CHARACTER_LITERAL shift 17
89 NEW shift 8
198 IF shift 74
237 class_instance_creation_expression shift 18
170 = reduce 197
108 | reduce 16
244 CLASS reduce 42
304 IF shift 74
19 BYTE reduce 85
166 [ shift 75
41 NEW reduce 97
151 ELSE reduce 101
90 name shift 76
77 NULL_LITERAL reduce 98
274 while_statement shift 77
263 statement_expression shift 14
155 ; reduce 27
170 [ shift 78
225 NEW reduce 99
108 & reduce 16
249 primary_no_new_array shift 12
335 PROTECTED reduce 87
195 integral_type shift 79
267 equality_expression shift 1
227 THIS shift 16
108 , reduce 16
108 ) reduce 16
94 VOID reduce 56
108 . shift 72
8 SHORT shift 25
141 IDENTIFIER reduce 7
248 THIS reduce 109
225 BOOLEAN reduce 99
108 ; reduce 16
143 NULL_LITERAL shift 53
108 < reduce 16
108 : reduce 16
307 primary_no_new_array shift 12
108 ? reduce 16
90 literal shift 59
89 class_instance_creation_expression shift 18
207 SHORT reduce 84
325 name shift 31
108 > reduce 16
194 == reduce 166
330 qualified_name shift 24
239 simple_name shift 13
33 ABSTRACT reduce 77
204 ABSTRACT reduce 43
178 <= reduce 144
135 ) reduce 73
42 method_invocation shift 36
267 conditional_or_expression shift 28
135 , reduce 73
53 != reduce 4
266 method_invocation shift 80
6 and_expression shift 23
333 expression shift 81
175 exclusive_or_expression shift 10
194 <= reduce 166
160 PRIVATE reduce 31
105 array_creation_expression shift 56
263 expression_statement shift 82
64 unary_expression shift 83
89 STRING_LITERAL shift 55
19 PRIVATE reduce 85
301 inclusive_or_expression shift 46
109 != reduce 21
267 IDENTIFIER shift 15
40 array_creation_expression shift 56
313 expression_statement shift 82
178 == reduce 144
313 { shift 84
263 { shift 84
202 primary shift 34
132 FINAL reduce 75
36 | reduce 135
203 INSTANCEOF reduce 176
44 simple_name shift 13
58 : reduce 156
58 ; reduce 156
58 < reduce 156
58 > reduce 156
58 ? reduce 156
191 qualified_name shift 24
266 literal shift 59
22 ) reduce 71
178 >= reduce 144
216 VOID shift 85
183 ABSTRACT reduce 28
254 != reduce 169
58 % reduce 156
143 array_access shift 50
58 & reduce 156
263 ( shift 6
58 ) reduce 156
58 * reduce 156
58 + reduce 156
58 , reduce 156
84 NULL_LITERAL reduce 89
58 - reduce 156
95 IF reduce 118
70 method_invocation shift 36
22 , reduce 71
58 / reduce 156
313 ( shift 6
227 NULL_LITERAL shift 53
115 FINAL reduce 58
6 assignment_expression shift 86
160 INTERFACE reduce 31
127 RETURN shift 87
58 ] reduce 156
58 ^ reduce 156
313 ; shift 88
245 qualified_name shift 24
314 PUBLIC reduce 39
266 integral_type shift 79
263 ; shift 88
42 integral_type shift 79
41 STRING_LITERAL reduce 97
41 WHILE reduce 97
267 INTEGER_LITERAL shift 11
92 qualified_name shift 24
82 ELSE reduce 106
127 while_statement shift 77
36 ; reduce 135
148 & reduce 173
148 % shift 89
36 < reduce 135
237 STRING_LITERAL shift 55
36 : reduce 135
82 THIS reduce 106
148 * shift 90
148 ) reduce 173
124 array_creation_expression shift 56
263 if_then_statement shift 91
148 - reduce 173
148 , reduce 173
148 + reduce 173
44 field_access shift 54
36 ? reduce 135
241 >= reduce 167
148 / shift 92
36 > reduce 135
314 PROTECTED reduce 39
264 ] reduce 183
148 : reduce 173
264 ^ reduce 183
148 > reduce 173
148 < reduce 173
148 ; reduce 173
234 == reduce 181
148 ? reduce 173
36 [ reduce 135
255 BOOLEAN reduce 92
133 != reduce 137
175 and_expression shift 23
36 ] reduce 135
36 ^ reduce 135
241 == reduce 167
97 EXTENDS shift 93
315 left_hand_side shift 7
218 { shift 94
47 ~ shift 64
264 | reduce 183
142 SHORT reduce 105
148 ^ reduce 173
148 ] reduce 173
100 array_access shift 20
315 STRING_LITERAL shift 55
191 statement shift 95
6 exclusive_or_expression shift 10
234 <= shift 96
274 RETURN shift 87
254 && reduce 169
325 literal shift 59
57 CHAR reduce 59
15 || reduce 24
13 IDENTIFIER reduce 22
252 primary_no_new_array shift 12
301 IDENTIFIER shift 15
215 ELSE reduce 119
275 BOOLEAN reduce 61
303 BOOLEAN_LITERAL shift 35
127 expression_statement shift 82
198 CHARACTER_LITERAL shift 17
148 | reduce 173
64 cast_expression shift 62
71 || reduce 171
194 >= reduce 166
264 , reduce 183
248 BOOLEAN reduce 109
264 ) reduce 183
308 STATIC reduce 44
337 && reduce 178
40 relational_expression shift 49
264 & reduce 183
191 assignment shift 66
36 + reduce 135
111 >= reduce 165
36 , reduce 135
36 ) reduce 135
264 ? reduce 183
36 * reduce 135
227 array_access shift 20
302 VOID reduce 76
243 IDENTIFIER shift 97
304 CHARACTER_LITERAL shift 17
36 % reduce 135
264 ; reduce 183
278 qualified_name shift 24
36 & reduce 135
264 : reduce 183
51 INSTANCEOF reduce 19
195 simple_name shift 13
36 / reduce 135
36 - reduce 135
36 . reduce 135
202 equality_expression shift 1
249 CHARACTER_LITERAL shift 17
282 CHARACTER_LITERAL shift 17
96 array_access shift 20
47 - shift 44
118 CLASS reduce 40
47 + shift 43
94 CHAR reduce 56
47 ( shift 42
277 ( reduce 93
164 ABSTRACT reduce 34
111 == reduce 165
47 ! shift 47
95 CHARACTER_LITERAL reduce 118
127 { shift 84
252 CHARACTER_LITERAL shift 17
51 >= reduce 19
194 INSTANCEOF reduce 166
142 IF reduce 105
144 FOR reduce 116
279 NATIVE reduce 39
40 name shift 31
282 for_init shift 98
111 <= reduce 165
70 simple_name shift 13
277 ; reduce 93
51 == reduce 19
342 FINAL reduce 30
216 primitive_type shift 99
138 SHORT reduce 107
239 literal shift 59
127 ( shift 6
6 BOOLEAN_LITERAL shift 35
105 name shift 76
46 && reduce 188
241 <= reduce 167
335 INT reduce 87
96 THIS shift 16
255 NULL_LITERAL reduce 92
302 SHORT reduce 76
127 ; shift 88
341 CHARACTER_LITERAL reduce 200
183 FINAL reduce 28
51 <= reduce 19
313 RETURN shift 87
6 assignment shift 26
262 || reduce 174
33 BOOLEAN reduce 77
204 BOOLEAN reduce 43
337 != reduce 178
307 qualified_name shift 24
234 >= shift 100
277 } reduce 93
280 class_or_interface_type shift 101
285 IDENTIFIER shift 102
266 simple_name shift 13
106 IDENTIFIER shift 15
335 PUBLIC reduce 87
277 { reduce 93
11 ^ reduce 0
307 STRING_LITERAL shift 55
11 ] reduce 0
11 [ reduce 0
45 CHARACTER_LITERAL reduce 104
274 expression_statement shift 82
70 conditional_and_expression shift 73
321 assignment shift 26
251 IDENTIFIER reduce 20
224 } reduce 88
96 STRING_LITERAL shift 55
224 { reduce 88
214 ABSTRACT reduce 62
321 assignment_expression shift 86
322 qualified_name shift 24
249 primary shift 21
91 BYTE reduce 96
142 STRING_LITERAL reduce 105
203 == reduce 176
11 ? reduce 0
11 > reduce 0
11 < reduce 0
172 FOR reduce 113
275 ABSTRACT reduce 61
11 ; reduce 0
11 : reduce 0
169 equality_expression shift 1
199 PROTECTED reduce 67
314 field_declaration shift 103
234 | reduce 181
203 <= reduce 176
267 literal shift 59
77 CHAR reduce 98
313 if_then_statement shift 91
274 primary shift 34
294 <= reduce 160
248 STRING_LITERAL reduce 109
216 integral_type shift 79
195 primitive_type shift 99
11 / reduce 0
234 ^ reduce 181
96 qualified_name shift 24
136 NULL_LITERAL shift 53
11 . reduce 0
11 - reduce 0
138 STRING_LITERAL reduce 107
11 , reduce 0
234 ] reduce 181
11 + reduce 0
11 * reduce 0
11 ) reduce 0
11 & reduce 0
11 % reduce 0
253 ( shift 6
96 postfix_expression shift 27
44 INTEGER_LITERAL shift 11
253 ) reduce 138
305 != reduce 155
6 CHARACTER_LITERAL shift 17
100 primary shift 21
253 , reduce 138
222 postfix_expression shift 27
234 , reduce 181
4 ELSE reduce 103
234 ) reduce 181
150 WHILE reduce 91
169 argument_list shift 104
192 ; reduce 32
234 > shift 105
234 ? reduce 181
234 < shift 106
33 SHORT reduce 77
234 : reduce 181
64 literal shift 59
234 ; reduce 181
42 BOOLEAN_LITERAL shift 35
226 qualified_name shift 24
202 relational_expression shift 49
218 class_body shift 107
207 ABSTRACT reduce 84
240 BOOLEAN reduce 86
22 name shift 108
47 IDENTIFIER shift 15
197 ; reduce 66
143 left_hand_side shift 7
336 CHAR reduce 127
307 array_access shift 20
297 } reduce 57
70 conditional_expression shift 48
303 method_invocation shift 36
138 NULL_LITERAL reduce 107
198 THIS shift 16
136 qualified_name shift 24
227 STRING_LITERAL shift 55
226 class_instance_creation_expression shift 18
207 BOOLEAN reduce 84
274 IF shift 74
148 && reduce 173
109 INSTANCEOF reduce 21
118 VOID reduce 40
78 IDENTIFIER shift 15
134 INTEGER_LITERAL shift 11
240 } reduce 86
88 ELSE reduce 108
64 simple_name shift 13
77 BOOLEAN_LITERAL reduce 98
307 NULL_LITERAL shift 53
327 ] shift 109
95 THIS reduce 118
224 ( reduce 88
304 primary_no_new_array shift 12
88 IDENTIFIER reduce 108
224 ; reduce 88
160 NATIVE reduce 31
210 INT shift 110
142 NULL_LITERAL reduce 105
222 qualified_name shift 24
244 SHORT reduce 42
18 && reduce 133
43 THIS shift 16
250 CHARACTER_LITERAL shift 17
45 IF reduce 104
199 PRIVATE reduce 67
276 IMPLEMENTS reduce 50
194 dims shift 111
118 ABSTRACT reduce 40
42 CHAR shift 52
214 VOID reduce 62
127 IDENTIFIER shift 15
90 IDENTIFIER shift 15
136 array_creation_expression shift 56
227 postfix_expression shift 27
124 expression shift 112
203 >= reduce 176
124 THIS shift 16
103 PROTECTED reduce 60
255 CHAR reduce 92
270 EXTENDS shift 113
336 STRING_LITERAL reduce 127
282 BOOLEAN_LITERAL shift 35
103 INT reduce 60
21 & reduce 153
209 dim_expr shift 114
21 % reduce 153
134 method_invocation shift 36
5 IDENTIFIER reduce 95
240 ABSTRACT reduce 86
83 != reduce 159
235 || reduce 175
314 class_member_declaration shift 115
255 IF reduce 92
21 / reduce 153
21 * reduce 153
21 ) reduce 153
268 FINAL shift 37
21 . shift 116
21 - reduce 153
21 , reduce 153
21 + reduce 153
108 <= reduce 16
21 ? reduce 153
21 : reduce 153
280 IDENTIFIER shift 15
293 dim_expr shift 114
56 || reduce 129
21 > reduce 153
21 < reduce 153
21 ; reduce 153
44 method_invocation shift 36
47 postfix_expression shift 27
202 conditional_or_expression shift 28
216 type shift 117
249 ! shift 47
84 THIS reduce 89
216 modifier shift 118
277 THIS reduce 93
224 RETURN reduce 88
253 conditional_and_expression shift 73
216 reference_type shift 61
315 CHARACTER_LITERAL shift 17
21 ^ reduce 153
21 ] reduce 153
169 conditional_or_expression shift 28
222 != reduce 132
64 NEW shift 8
301 ( shift 6
199 BYTE reduce 67
282 CHAR shift 52
213 && reduce 164
336 BOOLEAN_LITERAL reduce 127
24 && reduce 23
237 expression_opt shift 119
222 IDENTIFIER shift 15
204 SHORT reduce 43
252 BOOLEAN_LITERAL shift 35
313 name shift 31
255 BOOLEAN_LITERAL reduce 92
274 primary_no_new_array shift 12
118 CHAR reduce 40
268 modifier shift 118
246 variable_declarator_id shift 120
231 ABSTRACT reduce 33
21 | reduce 153
303 left_hand_side shift 7
113 qualified_name shift 24
103 NATIVE reduce 60
312 >= reduce 162
150 INTEGER_LITERAL reduce 91
31 = reduce 197
154 INT reduce 114
225 WHILE reduce 99
43 class_instance_creation_expression shift 18
106 qualified_name shift 24
248 ELSE reduce 109
198 statement_no_short_if shift 121
275 } reduce 61
31 . shift 72
253 array_creation_expression shift 56
325 IDENTIFIER shift 15
237 field_access shift 32
323 modifier shift 118
31 ( shift 70
142 CHAR reduce 105
240 SHORT reduce 86
90 unary_expression shift 122
242 IF reduce 90
136 array_access shift 50
312 == reduce 162
226 THIS shift 16
274 block shift 45
33 STATIC reduce 77
341 BOOLEAN_LITERAL reduce 200
263 RETURN shift 87
213 INSTANCEOF reduce 164
186 IDENTIFIER reduce 47
118 BOOLEAN reduce 40
249 + shift 43
198 class_instance_creation_expression shift 123
37 IDENTIFIER reduce 46
164 STATIC reduce 34
249 - shift 44
106 array_access shift 20
322 class_instance_creation_expression shift 18
250 array_creation_expression shift 56
249 ( shift 42
333 conditional_or_expression shift 28
307 NEW shift 8
138 CHAR reduce 107
312 <= reduce 162
204 STATIC reduce 43
303 and_expression shift 23
108 == reduce 16
294 == reduce 160
249 ~ shift 64
43 qualified_name shift 24
31 [ shift 124
94 FINAL reduce 56
213 != reduce 164
222 && reduce 132
24 != reduce 23
198 WHILE shift 125
282 STRING_LITERAL shift 55
87 expression_opt shift 126
325 field_access shift 32
252 ~ shift 64
95 WHILE reduce 118
108 >= reduce 16
294 >= reduce 160
77 BOOLEAN reduce 98
304 if_then_else_statement shift 41
77 IF reduce 98
87 field_access shift 32
44 name shift 76
315 assignment_expression shift 86
88 THIS reduce 108
123 ; reduce 112
254 <= reduce 169
341 ( reduce 200
191 STRING_LITERAL shift 55
78 conditional_and_expression shift 73
70 STRING_LITERAL shift 55
53 >= reduce 4
123 . reduce 133
139 FOR reduce 95
18 <= reduce 133
165 ) shift 127
202 array_access shift 50
108 IDENTIFIER reduce 16
0 CLASS reduce 29
123 ) reduce 112
40 expression shift 128
219 { reduce 53
141 [ reduce 7
202 NULL_LITERAL shift 53
13 IMPLEMENTS reduce 22
139 STRING_LITERAL reduce 95
258 NATIVE reduce 41
160 PROTECTED reduce 31
266 BYTE shift 129
18 == reduce 133
308 INTERFACE reduce 44
332 <= reduce 152
45 WHILE reduce 104
315 assignment shift 26
322 left_hand_side shift 7
252 - shift 44
89 qualified_name shift 24
252 + shift 43
231 CLASS reduce 33
337 == reduce 178
252 ( shift 42
53 <= reduce 4
124 equality_expression shift 1
137 == reduce 15
137 >= reduce 15
252 ! shift 47
274 BOOLEAN_LITERAL shift 35
313 array_access shift 50
254 >= reduce 169
314 method_header shift 130
150 BYTE reduce 91
42 STRING_LITERAL shift 55
134 conditional_expression shift 48
254 == reduce 169
123 [ reduce 133
138 BOOLEAN_LITERAL reduce 107
337 >= reduce 178
237 assignment shift 26
109 | reduce 21
103 BYTE reduce 60
250 assignment_expression shift 86
142 BOOLEAN_LITERAL reduce 105
53 == reduce 4
155 IDENTIFIER reduce 27
250 assignment shift 26
45 THIS reduce 104
108 != reduce 16
22 INT shift 110
237 assignment_expression shift 86
282 NEW shift 8
333 name shift 31
141 ) reduce 7
109 ^ reduce 21
109 ] reduce 21
292 >= reduce 172
309 ; reduce 124
87 conditional_and_expression shift 73
78 field_access shift 32
225 IF reduce 99
36 && reduce 135
109 [ reduce 21
62 || reduce 161
191 RETURN shift 87
277 IDENTIFIER reduce 93
85 method_declarator shift 131
282 array_access shift 50
130 block shift 132
109 > reduce 21
292 == reduce 172
109 ? reduce 21
39 ) shift 133
337 <= reduce 178
297 SHORT reduce 57
39 , shift 134
322 THIS shift 16
109 : reduce 21
250 THIS shift 16
195 formal_parameter shift 135
109 < reduce 21
137 <= reduce 15
109 ; reduce 21
95 BOOLEAN reduce 118
195 BYTE shift 129
295 || reduce 177
103 PRIVATE reduce 60
275 SHORT reduce 61
82 IF reduce 106
223 primary shift 34
199 INT reduce 67
169 name shift 31
119 ; shift 136
292 <= reduce 172
321 CHARACTER_LITERAL shift 17
0 ABSTRACT reduce 29
143 assignment_expression shift 86
17 || reduce 2
336 NEW reduce 127
154 INTEGER_LITERAL reduce 114
282 array_type shift 137
6 array_access shift 50
109 & reduce 21
239 reference_type shift 61
301 conditional_and_expression shift 73
109 ) reduce 21
332 == reduce 152
325 return_statement shift 138
109 , reduce 21
302 ABSTRACT reduce 76
19 INT reduce 85
323 SHORT shift 25
64 STRING_LITERAL shift 55
42 NEW shift 8
313 statement_without_trailing_substatement shift 139
279 method_header shift 140
2 VOID reduce 45
313 NULL_LITERAL shift 53
62 INSTANCEOF reduce 161
298 { reduce 78
222 array_creation_expression shift 56
42 numeric_type shift 141
191 if_then_else_statement shift 41
304 array_access shift 50
304 empty_statement shift 142
108 && reduce 16
332 >= reduce 152
36 != reduce 135
89 CHARACTER_LITERAL shift 17
133 % reduce 137
133 & reduce 137
311 IDENTIFIER reduce 36
41 BOOLEAN_LITERAL reduce 97
77 WHILE reduce 98
188 ; reduce 63
188 = shift 143
45 BOOLEAN reduce 104
19 PROTECTED reduce 85
202 inclusive_or_expression shift 46
155 PUBLIC reduce 27
148 != reduce 173
106 ~ shift 64
313 INTEGER_LITERAL shift 11
263 qualified_name shift 24
177 equality_expression shift 1
46 ] reduce 188
274 statement shift 144
133 ; reduce 137
133 < reduce 137
2 CHAR reduce 45
133 : reduce 137
90 field_access shift 54
133 ? reduce 137
42 conditional_expression shift 48
134 NEW shift 8
133 > reduce 137
335 } reduce 87
333 primary_no_new_array shift 12
176 ELSE reduce 102
133 + reduce 137
133 , reduce 137
48 ] reduce 194
133 ) reduce 137
133 * reduce 137
133 / reduce 137
290 , reduce 82
133 - reduce 137
133 . reduce 137
46 : reduce 188
46 ; reduce 188
216 numeric_type shift 141
266 class_instance_creation_expression shift 123
304 statement shift 95
169 relational_expression shift 49
46 ? reduce 188
46 ) reduce 188
177 and_expression shift 145
100 primary_no_new_array shift 12
127 qualified_name shift 24
46 , reduce 188
43 postfix_expression shift 27
115 SHORT reduce 58
48 : reduce 194
252 array_access shift 20
48 ; reduce 194
282 numeric_type shift 141
48 , reduce 194
266 WHILE shift 146
237 conditional_and_expression shift 73
136 ( shift 6
342 IMPORT reduce 30
136 ) reduce 125
48 ) reduce 194
322 assignment_expression shift 86
264 != shift 147
216 FINAL shift 37
41 CHAR reduce 97
222 CHARACTER_LITERAL shift 17
304 NULL_LITERAL shift 53
263 array_creation_expression shift 56
333 equality_expression shift 1
191 ; shift 88
145 ] reduce 185
127 array_creation_expression shift 56
252 NULL_LITERAL shift 53
27 INSTANCEOF reduce 158
249 multiplicative_expression shift 148
145 ^ reduce 185
266 primitive_type shift 99
138 NEW reduce 107
285 variable_declarator shift 149
290 { reduce 82
115 } reduce 58
304 NEW shift 8
266 local_variable_declaration_statement shift 150
223 BOOLEAN_LITERAL shift 35
226 assignment_expression shift 86
249 NULL_LITERAL shift 53
19 NATIVE reduce 85
78 array_creation_expression shift 56
258 INT reduce 41
305 | reduce 155
171 IMPLEMENTS reduce 17
134 inclusive_or_expression shift 46
47 qualified_name shift 24
224 PUBLIC reduce 88
145 | reduce 185
315 qualified_name shift 24
143 qualified_name shift 24
100 BOOLEAN_LITERAL shift 35
333 relational_expression shift 49
216 array_type shift 137
282 NULL_LITERAL shift 53
191 ( shift 6
313 if_then_else_statement_no_short_if shift 151
145 & shift 152
6 STRING_LITERAL shift 55
142 NEW reduce 105
143 assignment shift 26
8 qualified_name shift 24
341 NULL_LITERAL reduce 200
191 { shift 84
227 qualified_name shift 24
155 import_declarations shift 153
170 IDENTIFIER reduce 16
210 name shift 108
145 , reduce 185
132 } reduce 75
18 >= reduce 133
145 ) reduce 185
245 BOOLEAN shift 29
266 return_statement shift 138
11 | reduce 0
214 BOOLEAN reduce 62
242 BOOLEAN reduce 90
145 ? reduce 185
63 IDENTIFIER reduce 14
191 expression_statement shift 82
145 ; reduce 185
145 : reduce 185
313 statement shift 154
242 THIS reduce 90
27 || reduce 158
84 IF reduce 89
47 array_creation_expression shift 56
203 && reduce 176
312 != reduce 162
195 name shift 108
251 , reduce 20
0 package_declaration shift 155
325 expression_statement shift 82
307 primary shift 21
325 FOR shift 156
70 left_hand_side shift 7
251 : reduce 20
172 STRING_LITERAL reduce 113
96 primary shift 21
210 formal_parameter shift 157
89 field_access shift 54
239 type shift 158
323 numeric_type shift 141
321 simple_name shift 13
251 & reduce 20
129 ) reduce 10
42 primary_no_new_array shift 12
114 <= reduce 143
251 ) reduce 20
12 || reduce 128
158 IDENTIFIER shift 159
127 INTEGER_LITERAL shift 11
250 IDENTIFIER shift 15
105 array_access shift 20
144 IDENTIFIER reduce 116
160 STATIC reduce 31
142 FOR reduce 105
84 INT reduce 89
263 literal shift 59
134 conditional_or_expression shift 28
251 > reduce 20
191 block shift 45
251 < reduce 20
153 single_type_import_declaration shift 160
251 ; reduce 20
248 { reduce 109
248 } reduce 109
235 INSTANCEOF reduce 175
251 ? reduce 20
105 postfix_expression shift 27
114 == reduce 143
70 BOOLEAN_LITERAL shift 35
321 literal shift 59
336 SHORT reduce 127
100 IDENTIFIER shift 15
179 IDENTIFIER shift 15
198 field_access shift 32
177 relational_expression shift 49
223 array_creation_expression shift 56
318 | reduce 148
282 statement_expression shift 161
96 ~ shift 64
87 NEW shift 8
302 STATIC reduce 76
87 expression shift 162
83 <= reduce 159
124 assignment_expression shift 86
304 field_access shift 32
321 array_access shift 50
274 IDENTIFIER shift 15
82 INT reduce 106
129 [ reduce 10
255 WHILE reduce 92
192 IDENTIFIER reduce 32
210 SHORT shift 25
2 IDENTIFIER reduce 45
42 conditional_and_expression shift 73
94 STATIC reduce 56
266 BOOLEAN_LITERAL shift 35
115 NATIVE reduce 58
35 || reduce 1
312 && reduce 162
42 SHORT shift 25
242 CHAR reduce 90
138 } reduce 107
252 NEW shift 8
138 { reduce 107
144 STRING_LITERAL reduce 116
65 [ shift 163
169 INTEGER_LITERAL shift 11
134 IDENTIFIER shift 15
172 IDENTIFIER reduce 113
47 primary_no_new_array shift 12
305 <= reduce 155
32 [ reduce 134
263 simple_name shift 13
96 ! shift 47
41 CHARACTER_LITERAL reduce 97
96 ( shift 42
213 || reduce 164
154 FOR reduce 114
180 != reduce 150
205 ; shift 164
249 IDENTIFIER shift 15
204 FINAL reduce 43
164 FINAL reduce 34
305 == reduce 155
155 FINAL reduce 27
44 STRING_LITERAL shift 55
191 array_creation_expression shift 56
341 NEW reduce 200
96 + shift 43
88 INTEGER_LITERAL reduce 108
250 equality_expression shift 1
252 array_creation_expression shift 56
96 - shift 44
105 literal shift 59
255 NEW reduce 92
231 STATIC reduce 33
169 conditional_and_expression shift 73
115 CHAR reduce 58
202 THIS shift 16
32 . reduce 134
138 ; reduce 107
96 method_invocation shift 36
305 >= reduce 155
92 array_creation_expression shift 56
303 conditional_expression shift 48
202 INTEGER_LITERAL shift 11
138 ( reduce 107
114 >= reduce 143
65 ) reduce 166
198 while_statement shift 77
248 ( reduce 109
237 CHARACTER_LITERAL shift 17
150 CHAR reduce 91
88 IF reduce 108
295 INSTANCEOF reduce 177
248 ; reduce 109
91 NEW reduce 96
321 NULL_LITERAL shift 53
15 INSTANCEOF reduce 24
274 NEW shift 8
32 = reduce 198
263 NULL_LITERAL shift 53
88 SHORT reduce 108
144 INT reduce 116
110 IDENTIFIER reduce 12
5 ( reduce 95
195 BOOLEAN shift 29
322 ( shift 6
186 BYTE reduce 47
106 THIS shift 16
10 ; reduce 186
211 conditional_and_expression shift 73
10 : reduce 186
180 && reduce 150
164 IMPORT reduce 34
100 NEW shift 8
172 INT reduce 113
84 STRING_LITERAL reduce 89
10 ? reduce 186
37 SHORT reduce 46
10 , reduce 186
249 class_instance_creation_expression shift 18
10 ) reduce 186
103 SHORT reduce 60
84 BOOLEAN_LITERAL reduce 89
106 CHARACTER_LITERAL shift 17
24 INSTANCEOF reduce 23
233 ELSE reduce 115
37 VOID reduce 46
216 qualified_name shift 24
5 WHILE reduce 95
2 NATIVE reduce 45
6 field_access shift 32
253 array_access shift 50
136 left_hand_side shift 7
308 ABSTRACT reduce 44
186 INTERFACE reduce 47
59 != reduce 130
47 CHARACTER_LITERAL shift 17
313 literal shift 59
82 STRING_LITERAL reduce 106
282 integral_type shift 79
109 || reduce 21
321 THIS shift 16
210 BYTE shift 129
267 field_access shift 32
91 IDENTIFIER reduce 96
199 IDENTIFIER reduce 67
82 BOOLEAN_LITERAL reduce 106
303 primary_no_new_array shift 12
124 left_hand_side shift 7
134 class_instance_creation_expression shift 18
304 return_statement shift 138
294 != reduce 160
252 STRING_LITERAL shift 55
192 CLASS reduce 32
2 CLASS reduce 45
250 expression shift 165
70 name shift 31
105 simple_name shift 13
318 = reduce 148
318 > reduce 148
245 primitive_type shift 166
318 ? reduce 148
242 IDENTIFIER reduce 90
318 : reduce 148
318 ; reduce 148
318 < reduce 148
87 equality_expression shift 1
124 relational_expression shift 49
237 conditional_expression shift 48
70 argument_list shift 167
64 unary_expression_not_plus_minus shift 168
313 THIS shift 16
318 - reduce 148
318 . reduce 148
318 / reduce 148
322 method_invocation shift 36
202 literal shift 59
318 ) reduce 148
318 * reduce 148
0 INTERFACE reduce 29
318 + reduce 148
55 == reduce 3
318 , reduce 148
318 % reduce 148
21 INSTANCEOF reduce 153
318 & reduce 148
83 >= reduce 159
318 ( shift 169
266 BOOLEAN shift 29
191 statement_expression shift 14
41 IF reduce 97
318 ] reduce 148
333 assignment shift 26
318 ^ reduce 148
282 array_creation_expression shift 56
303 THIS shift 16
266 name shift 170
322 primary shift 34
238 equality_expression shift 1
318 [ reduce 148
23 || reduce 184
113 class_or_interface_type shift 171
341 STRING_LITERAL reduce 200
57 FINAL reduce 59
5 } reduce 95
5 { reduce 95
55 >= reduce 3
83 == reduce 159
321 qualified_name shift 24
115 BOOLEAN reduce 58
282 ; reduce 122
263 statement shift 172
49 || reduce 179
248 RETURN reduce 109
127 statement_without_trailing_substatement shift 5
128 ] shift 173
139 INT reduce 95
333 exclusive_or_expression shift 10
136 name shift 31
10 | shift 174
282 ( shift 6
222 INTEGER_LITERAL shift 11
59 && reduce 130
139 BOOLEAN_LITERAL reduce 95
277 CHARACTER_LITERAL reduce 93
168 || reduce 157
28 || shift 175
198 while_statement_no_short_if shift 176
70 inclusive_or_expression shift 46
274 for_statement_no_short_if shift 4
70 and_expression shift 23
304 method_invocation shift 80
171 { reduce 17
172 WHILE reduce 113
10 ^ shift 177
43 cast_expression shift 62
37 PRIVATE reduce 46
10 ] reduce 186
239 NEW shift 8
253 literal shift 59
238 relational_expression shift 49
5 ; reduce 95
284 dim_expr shift 178
304 while_statement_no_short_if shift 176
55 <= reduce 3
253 qualified_name shift 24
219 , reduce 53
0 PACKAGE shift 179
275 STATIC reduce 61
24 == reduce 23
280 qualified_name shift 24
255 IDENTIFIER reduce 92
169 simple_name shift 13
223 ) reduce 125
82 BOOLEAN reduce 106
333 conditional_expression shift 48
223 ( shift 6
106 NULL_LITERAL shift 53
134 BOOLEAN_LITERAL shift 35
220 INSTANCEOF reduce 141
342 PROTECTED reduce 30
308 PUBLIC reduce 44
275 IDENTIFIER reduce 61
24 <= reduce 23
144 WHILE reduce 116
239 numeric_type shift 141
104 , shift 134
223 statement_expression shift 68
104 ) shift 180
161 ; reduce 123
169 NULL_LITERAL shift 53
42 exclusive_or_expression shift 10
22 SHORT shift 25
178 % reduce 144
178 & reduce 144
64 INTEGER_LITERAL shift 11
106 simple_name shift 13
42 BYTE shift 129
64 CHARACTER_LITERAL shift 17
301 field_access shift 32
178 / reduce 144
315 NULL_LITERAL shift 53
27 != reduce 158
178 ) reduce 144
178 * reduce 144
335 FINAL reduce 87
178 - reduce 144
106 literal shift 59
178 . reduce 144
178 + reduce 144
178 , reduce 144
84 BOOLEAN reduce 89
208 || reduce 151
178 ? reduce 144
244 FINAL reduce 42
178 : reduce 144
304 expression_statement shift 82
304 primary shift 34
199 NATIVE reduce 67
178 > reduce 144
6 conditional_expression shift 48
178 ; reduce 144
178 < reduce 144
44 array_creation_expression shift 56
70 exclusive_or_expression shift 10
63 || reduce 14
2 ABSTRACT reduce 45
191 empty_statement shift 142
323 CHAR shift 52
150 IDENTIFIER reduce 91
202 qualified_name shift 24
24 >= reduce 23
321 INTEGER_LITERAL shift 11
134 name shift 31
198 expression_statement shift 82
249 BOOLEAN_LITERAL shift 35
222 unary_expression_not_plus_minus shift 181
333 THIS shift 16
95 { reduce 118
178 ] reduce 144
178 ^ reduce 144
95 } reduce 118
274 WHILE shift 125
274 left_hand_side shift 7
178 [ reduce 144
56 ; reduce 129
56 : reduce 129
95 RETURN reduce 118
56 ? reduce 129
56 > reduce 129
253 THIS shift 16
56 < reduce 129
44 BOOLEAN_LITERAL shift 35
253 simple_name shift 13
56 + reduce 129
127 THIS shift 16
56 * reduce 129
56 ) reduce 129
278 IDENTIFIER shift 15
105 cast_expression shift 62
56 / reduce 129
214 INT reduce 62
56 . reduce 129
56 - reduce 129
56 , reduce 129
315 array_access shift 50
83 && reduce 159
142 WHILE reduce 105
103 FINAL reduce 60
56 & reduce 129
56 % reduce 129
194 || reduce 166
198 FOR shift 182
222 INSTANCEOF reduce 132
33 FINAL reduce 77
153 import_declaration shift 183
139 IDENTIFIER reduce 95
248 WHILE reduce 109
92 primary shift 21
266 array_type shift 137
222 <= reduce 132
253 NULL_LITERAL shift 53
308 CLASS reduce 44
127 array_access shift 50
111 | reduce 165
299 || reduce 189
297 NATIVE reduce 57
191 NEW shift 8
56 | reduce 129
263 statement_without_trailing_substatement shift 139
304 FOR shift 182
315 THIS shift 16
153 ; shift 184
222 == reduce 132
296 INSTANCEOF reduce 170
6 conditional_and_expression shift 73
111 [ shift 185
40 method_invocation shift 36
336 BYTE reduce 127
111 ] reduce 165
111 ^ reduce 165
51 | reduce 19
325 block shift 45
323 NATIVE shift 186
313 CHARACTER_LITERAL shift 17
111 / reduce 165
314 INT reduce 39
330 IDENTIFIER shift 15
111 + reduce 165
89 postfix_expression shift 27
56 ^ reduce 129
111 , reduce 165
169 array_access shift 50
56 ] reduce 129
111 - reduce 165
111 . reduce 165
91 CHAR reduce 96
207 } reduce 84
111 : reduce 165
222 >= reduce 132
111 ? reduce 165
274 if_then_statement shift 91
111 ; reduce 165
150 NEW reduce 91
111 < reduce 165
169 assignment_expression shift 86
111 > reduce 165
127 IF shift 187
308 PROTECTED reduce 44
51 ] reduce 19
250 relational_expression shift 49
285 variable_declarator_id shift 188
51 [ reduce 19
51 ^ reduce 19
294 && reduce 160
122 || reduce 168
303 qualified_name shift 24
79 IDENTIFIER reduce 9
127 if_then_statement shift 91
40 primary shift 34
15 >= reduce 24
231 ; reduce 33
22 BYTE shift 129
25 ) reduce 11
51 < reduce 19
111 ) reduce 165
51 : reduce 19
111 * reduce 165
51 ; reduce 19
263 if_then_else_statement shift 41
111 % reduce 165
51 > reduce 19
111 & reduce 165
51 ? reduce 19
202 CHARACTER_LITERAL shift 17
274 class_instance_creation_expression shift 123
220 || reduce 141
303 exclusive_or_expression shift 10
51 , reduce 19
262 >= reduce 174
9 || reduce 147
15 <= reduce 24
307 method_invocation shift 36
15 == reduce 24
96 class_instance_creation_expression shift 18
196 { reduce 70
51 ) reduce 19
136 BOOLEAN_LITERAL shift 35
51 & reduce 19
78 expression shift 112
127 if_then_else_statement shift 41
70 assignment_expression shift 86
134 and_expression shift 23
6 primary shift 34
308 IDENTIFIER reduce 44
261 ] reduce 180
261 ^ reduce 180
277 BYTE reduce 93
13 != reduce 22
124 IDENTIFIER shift 15
40 qualified_name shift 24
266 INT shift 110
42 name shift 189
263 array_access shift 50
261 | reduce 180
92 BOOLEAN_LITERAL shift 35
101 { reduce 18
280 name shift 190
114 != reduce 143
71 <= reduce 171
237 left_hand_side shift 7
261 ? reduce 180
261 > shift 105
136 IDENTIFIER shift 15
308 INT reduce 44
256 ) shift 191
70 IDENTIFIER shift 15
222 NULL_LITERAL shift 53
266 assignment shift 66
196 ; reduce 70
153 type_import_on_demand_declaration shift 192
277 STRING_LITERAL reduce 93
199 ABSTRACT reduce 67
249 name shift 76
71 == reduce 171
263 THIS shift 16
261 , reduce 180
261 ) reduce 180
195 INT shift 110
106 INTEGER_LITERAL shift 11
261 & reduce 180
211 conditional_expression shift 193
6 method_invocation shift 36
261 ; reduce 180
234 & reduce 181
40 primary_no_new_array shift 12
261 < shift 106
314 IDENTIFIER reduce 39
261 : reduce 180
178 | reduce 144
222 array_access shift 20
41 BOOLEAN reduce 97
70 conditional_or_expression shift 28
144 BYTE reduce 116
71 >= reduce 171
239 array_creation_expression shift 56
262 INSTANCEOF reduce 174
239 integral_type shift 79
37 PUBLIC reduce 46
293 dim_exprs shift 194
124 INTEGER_LITERAL shift 11
328 , shift 195
328 ) shift 196
138 RETURN reduce 107
301 conditional_expression shift 48
100 class_instance_creation_expression shift 18
225 NULL_LITERAL reduce 99
13 && reduce 22
143 expression shift 197
262 == reduce 174
173 INSTANCEOF reduce 145
42 and_expression shift 23
41 THIS reduce 97
81 ) shift 198
305 && reduce 155
180 <= reduce 150
114 && reduce 143
314 STATIC reduce 39
25 [ reduce 11
222 THIS shift 16
239 CHAR shift 52
155 IMPORT reduce 27
262 <= reduce 174
313 IF shift 74
101 , reduce 18
96 multiplicative_expression shift 71
130 method_body shift 199
223 STRING_LITERAL shift 55
37 CHAR reduce 46
106 unary_expression_not_plus_minus shift 168
9 INSTANCEOF reduce 147
312 < reduce 162
312 ; reduce 162
312 : reduce 162
225 SHORT reduce 99
124 NULL_LITERAL shift 53
312 ? reduce 162
312 > reduce 162
301 method_invocation shift 36
106 cast_expression shift 62
333 inclusive_or_expression shift 46
93 class_or_interface_type shift 101
250 INTEGER_LITERAL shift 11
144 ; reduce 116
274 FOR shift 182
189 dims shift 200
284 > reduce 166
1 || reduce 182
284 ? reduce 166
320 , shift 201
284 : reduce 166
44 CHARACTER_LITERAL shift 17
284 ; reduce 166
284 < reduce 166
247 || reduce 149
301 and_expression shift 23
172 BYTE reduce 113
313 while_statement shift 77
226 array_access shift 50
71 != reduce 171
144 ( reduce 116
207 PROTECTED reduce 84
312 & reduce 162
312 % reduce 162
312 , reduce 162
312 + reduce 162
251 != reduce 20
312 * reduce 162
312 ) reduce 162
44 ~ shift 64
253 INTEGER_LITERAL shift 11
312 / reduce 162
242 SHORT reduce 90
198 block shift 45
312 - reduce 162
240 PRIVATE reduce 86
284 ^ reduce 166
307 postfix_expression shift 27
284 [ shift 202
203 || reduce 176
245 INT shift 110
55 != reduce 3
284 ] reduce 166
42 left_hand_side shift 7
296 || reduce 170
45 FOR reduce 104
124 array_access shift 50
169 field_access shift 32
162 ; reduce 121
240 VOID reduce 86
96 additive_expression shift 203
144 } reduce 116
118 PROTECTED reduce 40
174 equality_expression shift 1
144 { reduce 116
323 BOOLEAN shift 29
323 PRIVATE shift 204
297 PRIVATE reduce 57
64 array_creation_expression shift 56
284 | reduce 166
70 primary_no_new_array shift 12
226 NEW shift 8
143 equality_expression shift 1
322 STRING_LITERAL shift 55
45 INTEGER_LITERAL reduce 104
191 while_statement shift 77
267 simple_name shift 13
58 INSTANCEOF reduce 156
303 assignment shift 26
210 IDENTIFIER shift 15
173 || reduce 145
143 relational_expression shift 49
241 > reduce 167
241 ; reduce 167
336 IDENTIFIER reduce 127
241 < reduce 167
241 : reduce 167
180 [ reduce 150
19 ABSTRACT reduce 85
319 || reduce 191
84 ( reduce 89
214 PROTECTED reduce 62
241 ? reduce 167
192 PUBLIC reduce 32
314 ABSTRACT reduce 39
226 simple_name shift 13
103 ABSTRACT reduce 60
211 and_expression shift 23
323 integral_type shift 79
180 ? reduce 150
237 inclusive_or_expression shift 46
199 PUBLIC reduce 67
180 > reduce 150
84 ; reduce 89
57 VOID reduce 59
132 CHAR reduce 75
13 % reduce 22
59 - reduce 130
59 . reduce 130
169 IDENTIFIER shift 15
71 && reduce 171
59 / reduce 130
180 / reduce 150
59 ) reduce 130
59 * reduce 130
180 - reduce 150
59 + reduce 130
342 ; reduce 30
180 . reduce 150
59 , reduce 130
204 PRIVATE reduce 43
241 % reduce 167
180 ; reduce 150
59 % reduce 130
241 & reduce 167
180 < reduce 150
59 & reduce 130
180 : reduce 150
222 NEW shift 8
133 && reduce 137
63 INSTANCEOF reduce 14
266 array_creation_expression shift 56
226 NULL_LITERAL shift 53
241 - reduce 167
241 + reduce 167
230 * shift 205
208 INSTANCEOF reduce 151
241 , reduce 167
195 array_type shift 137
241 ) reduce 167
84 CHARACTER_LITERAL reduce 89
330 class_or_interface_type shift 101
241 * reduce 167
40 ( shift 6
180 + reduce 150
180 , reduce 150
180 ) reduce 150
55 && reduce 3
180 * reduce 150
43 simple_name shift 13
241 / reduce 167
180 % reduce 150
180 & reduce 150
312 | reduce 162
241 | reduce 167
2 PUBLIC reduce 45
85 IDENTIFIER shift 206
155 PRIVATE reduce 27
45 SHORT reduce 104
44 ! shift 47
42 field_access shift 32
204 VOID reduce 43
320 { shift 207
237 conditional_or_expression shift 28
35 INSTANCEOF reduce 1
315 INTEGER_LITERAL shift 11
241 ] reduce 167
284 & reduce 166
241 ^ reduce 167
284 ) reduce 166
44 - shift 44
297 BOOLEAN reduce 57
312 ^ reduce 162
78 array_access shift 50
312 ] reduce 162
284 % reduce 166
275 PROTECTED reduce 61
284 . reduce 166
180 | reduce 150
284 / reduce 166
6 primary_no_new_array shift 12
322 conditional_or_expression shift 28
112 ] shift 208
44 + shift 43
164 PRIVATE reduce 34
284 * reduce 166
284 + reduce 166
267 conditional_and_expression shift 73
44 ( shift 42
284 , reduce 166
284 - reduce 166
258 CLASS reduce 41
325 NULL_LITERAL shift 53
124 NEW shift 8
267 array_access shift 50
211 exclusive_or_expression shift 10
54 || reduce 134
8 primitive_type shift 209
180 ] reduce 150
180 ^ reduce 150
186 INT reduce 47
136 class_instance_creation_expression shift 123
301 name shift 31
160 IDENTIFIER reduce 31
134 assignment_expression shift 86
225 FOR reduce 99
260 , reduce 81
56 >= reduce 129
198 INTEGER_LITERAL shift 11
325 simple_name shift 13
338 || reduce 187
263 while_statement shift 77
294 ] reduce 160
207 BYTE reduce 84
78 equality_expression shift 1
59 | reduce 130
82 { reduce 106
242 FOR reduce 90
82 } reduce 106
56 == reduce 129
294 ^ reduce 160
322 inclusive_or_expression shift 46
325 NEW shift 8
216 BOOLEAN shift 29
201 simple_name shift 13
265 ( shift 210
42 IDENTIFIER shift 15
3 : shift 211
275 BYTE reduce 61
340 ) shift 212
40 exclusive_or_expression shift 10
294 | reduce 160
43 array_access shift 20
302 CHAR reduce 76
105 INTEGER_LITERAL shift 11
333 qualified_name shift 24
254 INSTANCEOF reduce 169
56 <= reduce 129
91 INTEGER_LITERAL reduce 96
27 && reduce 158
294 * reduce 160
294 + reduce 160
282 qualified_name shift 24
294 , reduce 160
294 - reduce 160
294 & reduce 160
343 || reduce 142
294 ) reduce 160
294 / reduce 160
57 PRIVATE reduce 59
265 . reduce 22
59 > reduce 130
59 ? reduce 130
59 : reduce 130
59 ; reduce 130
53 | reduce 4
62 != reduce 161
59 < reduce 130
198 literal shift 59
88 CHAR reduce 108
2 SHORT reduce 45
294 % reduce 160
90 cast_expression shift 62
5 INT reduce 95
150 SHORT reduce 91
16 INSTANCEOF reduce 131
78 NULL_LITERAL shift 53
301 exclusive_or_expression shift 10
59 ] reduce 130
294 : reduce 160
59 ^ reduce 130
294 ; reduce 160
260 { reduce 81
137 INSTANCEOF reduce 15
294 < reduce 160
168 INSTANCEOF reduce 157
59 [ reduce 130
42 assignment_expression shift 86
301 primary shift 34
91 SHORT reduce 96
37 NATIVE reduce 46
294 > reduce 160
294 ? reduce 160
226 literal shift 59
265 [ reduce 22
199 STATIC reduce 67
120 , reduce 74
120 ) reduce 74
267 NULL_LITERAL shift 53
198 simple_name shift 13
164 NATIVE reduce 34
307 IDENTIFIER shift 15
94 IDENTIFIER reduce 56
136 primary_no_new_array shift 12
103 IDENTIFIER reduce 60
192 STATIC reduce 32
127 NULL_LITERAL shift 53
174 relational_expression shift 49
325 empty_statement shift 142
124 conditional_and_expression shift 73
73 || reduce 190
323 VOID shift 85
227 unary_expression_not_plus_minus shift 213
5 BOOLEAN_LITERAL reduce 95
95 ( reduce 118
267 NEW shift 8
90 simple_name shift 13
78 NEW shift 8
231 PROTECTED reduce 33
149 ; shift 214
222 simple_name shift 13
139 WHILE reduce 95
333 STRING_LITERAL shift 55
224 BYTE reduce 88
307 field_access shift 54
95 ; reduce 118
279 CHAR reduce 39
255 FOR reduce 92
92 CHARACTER_LITERAL shift 17
301 BOOLEAN_LITERAL shift 35
2 STATIC reduce 45
160 ABSTRACT reduce 31
303 CHARACTER_LITERAL shift 17
304 class_instance_creation_expression shift 123
224 PROTECTED reduce 88
242 INTEGER_LITERAL reduce 90
82 ( reduce 106
343 INSTANCEOF reduce 142
214 } reduce 62
227 NEW shift 8
62 && reduce 161
304 statement_no_short_if shift 215
37 FINAL reduce 46
91 FOR reduce 96
82 ; reduce 106
263 IF shift 74
304 WHILE shift 125
154 WHILE reduce 114
43 literal shift 59
266 CHARACTER_LITERAL shift 17
335 VOID reduce 87
325 statement shift 154
279 modifiers shift 216
202 assignment shift 26
92 ! shift 47
172 BOOLEAN_LITERAL reduce 113
96 BOOLEAN_LITERAL shift 35
254 || reduce 169
257 { reduce 25
257 | reduce 25
113 simple_name shift 13
8 INT shift 110
303 ( shift 6
92 - shift 44
78 relational_expression shift 49
92 + shift 43
313 qualified_name shift 24
285 method_declarator shift 217
18 || reduce 133
16 || reduce 131
92 ( shift 42
150 FOR reduce 91
244 BOOLEAN reduce 42
175 inclusive_or_expression shift 46
223 CHARACTER_LITERAL shift 17
315 literal shift 59
315 simple_name shift 13
277 INT reduce 93
82 RETURN reduce 106
244 VOID reduce 42
43 INTEGER_LITERAL shift 11
308 BYTE reduce 44
293 ( reduce 17
315 NEW shift 8
240 CHAR reduce 86
207 INT reduce 84
99 IDENTIFIER reduce 5
27 >= reduce 158
143 NEW shift 8
240 NATIVE reduce 86
332 || reduce 152
242 NEW reduce 90
314 BYTE reduce 39
275 INT reduce 61
279 VOID reduce 39
266 STRING_LITERAL shift 55
0 PROTECTED reduce 29
333 array_creation_expression shift 56
297 CHAR reduce 57
335 PRIVATE reduce 87
274 while_statement_no_short_if shift 176
237 method_invocation shift 36
183 IMPORT reduce 28
266 RETURN shift 87
89 method_invocation shift 36
22 formal_parameter shift 157
139 BYTE reduce 95
248 BOOLEAN_LITERAL reduce 109
143 simple_name shift 13
178 != reduce 144
77 RETURN reduce 98
105 unary_expression_not_plus_minus shift 168
202 expression shift 128
186 PROTECTED reduce 47
326 interfaces shift 218
60 INSTANCEOF reduce 146
245 array_type shift 137
263 INTEGER_LITERAL shift 11
322 BOOLEAN_LITERAL shift 35
198 if_then_else_statement shift 41
87 relational_expression shift 49
127 literal shift 59
330 interface_type shift 219
111 && reduce 165
242 NULL_LITERAL reduce 90
224 BOOLEAN_LITERAL reduce 88
293 [ shift 40
56 && reduce 129
244 PRIVATE reduce 42
199 SHORT reduce 67
138 THIS reduce 107
144 BOOLEAN_LITERAL reduce 116
56 != reduce 129
204 CHAR reduce 43
282 BOOLEAN shift 29
160 CLASS reduce 31
53 > reduce 4
250 simple_name shift 13
53 ? reduce 4
40 conditional_expression shift 48
249 field_access shift 54
53 : reduce 4
53 < reduce 4
237 name shift 31
90 unary_expression_not_plus_minus shift 168
192 ABSTRACT reduce 32
255 SHORT reduce 92
53 ; reduce 4
127 NEW shift 8
51 && reduce 19
33 PRIVATE reduce 77
301 primary_no_new_array shift 12
257 % reduce 25
313 assignment shift 66
282 THIS shift 16
15 IMPLEMENTS reduce 24
257 & reduce 25
77 STRING_LITERAL reduce 98
237 and_expression shift 23
191 IF shift 187
42 class_instance_creation_expression shift 18
337 || reduce 178
62 <= reduce 161
115 VOID reduce 58
137 || reduce 15
53 ^ reduce 4
94 ABSTRACT reduce 56
53 ] reduce 4
62 == reduce 161
250 NULL_LITERAL shift 53
198 statement shift 172
53 [ reduce 4
304 IDENTIFIER shift 15
257 ) reduce 25
274 field_access shift 32
257 ( reduce 25
257 + reduce 25
257 * reduce 25
257 - reduce 25
257 , reduce 25
257 / reduce 25
257 . reduce 25
292 || reduce 172
87 INTEGER_LITERAL shift 11
5 BYTE reduce 95
134 left_hand_side shift 7
159 , reduce 65
257 ; reduce 25
257 : reduce 25
159 ) reduce 65
198 array_access shift 50
257 = reduce 25
257 < reduce 25
227 simple_name shift 13
321 relational_expression shift 49
257 ? reduce 25
257 > reduce 25
239 BOOLEAN shift 29
62 >= reduce 161
284 dims_opt shift 220
132 PRIVATE reduce 75
159 ; reduce 65
132 VOID reduce 75
33 VOID reduce 77
159 = reduce 65
53 . reduce 4
52 IDENTIFIER reduce 13
53 - reduce 4
53 / reduce 4
53 * reduce 4
229 { shift 84
53 ) reduce 4
70 class_instance_creation_expression shift 18
47 name shift 76
258 IDENTIFIER reduce 41
53 , reduce 4
6 left_hand_side shift 7
53 + reduce 4
53 & reduce 4
53 % reduce 4
134 field_access shift 32
257 [ reduce 25
335 BOOLEAN reduce 87
257 ] reduce 25
198 empty_statement shift 142
321 equality_expression shift 1
253 relational_expression shift 49
60 || reduce 146
257 ^ reduce 25
19 PUBLIC reduce 85
111 != reduce 165
127 statement shift 144
115 PRIVATE reduce 58
247 INSTANCEOF reduce 149
103 PUBLIC reduce 60
222 cast_expression shift 62
237 primary shift 34
118 INTERFACE reduce 40
274 statement_no_short_if shift 221
88 NEW reduce 108
13 | reduce 22
13 { reduce 22
89 name shift 76
239 statement_expression shift 161
307 class_instance_creation_expression shift 18
54 INSTANCEOF reduce 134
154 IDENTIFIER reduce 114
51 != reduce 19
332 INSTANCEOF reduce 152
114 | reduce 143
302 FINAL reduce 76
222 literal shift 59
331 ) shift 222
45 NEW reduce 104
310 ; shift 223
302 NATIVE reduce 76
90 array_access shift 20
237 exclusive_or_expression shift 10
88 NULL_LITERAL reduce 108
47 BOOLEAN_LITERAL shift 35
226 INTEGER_LITERAL shift 11
210 class_or_interface_type shift 63
266 ( shift 6
183 PRIVATE reduce 28
78 literal shift 59
93 IDENTIFIER shift 15
127 empty_statement shift 142
292 INSTANCEOF reduce 172
248 INT reduce 109
13 ? reduce 22
13 > reduce 22
155 NATIVE reduce 27
13 = reduce 22
78 simple_name shift 13
13 < reduce 22
13 ; reduce 22
13 : reduce 22
114 : reduce 143
114 ; reduce 143
227 cast_expression shift 62
224 INT reduce 88
13 / reduce 22
13 . reduce 22
13 - reduce 22
13 , reduce 22
13 + reduce 22
84 { reduce 89
258 STATIC reduce 41
13 * reduce 22
43 NULL_LITERAL shift 53
114 > reduce 143
160 PUBLIC reduce 31
13 ) reduce 22
84 } reduce 89
114 ? reduce 143
13 ( reduce 22
114 < reduce 143
13 & reduce 22
325 array_access shift 50
77 ; reduce 98
223 qualified_name shift 24
13 ^ reduce 22
92 STRING_LITERAL shift 55
13 ] reduce 22
277 BOOLEAN_LITERAL reduce 93
13 [ reduce 22
57 BOOLEAN reduce 59
90 NEW shift 8
47 primary shift 21
114 [ reduce 143
77 ( reduce 98
114 ^ reduce 143
303 STRING_LITERAL shift 55
237 BOOLEAN_LITERAL shift 35
114 ] reduce 143
227 literal shift 59
266 } shift 224
87 literal shift 59
43 unary_expression_not_plus_minus shift 168
198 NEW shift 8
266 { shift 84
133 == reduce 137
252 THIS shift 16
342 INTERFACE reduce 30
266 for_statement shift 225
200 [ shift 185
125 ( shift 226
19 IDENTIFIER reduce 85
96 primary_no_new_array shift 12
237 primary_no_new_array shift 12
40 inclusive_or_expression shift 46
91 NULL_LITERAL reduce 96
105 NULL_LITERAL shift 53
77 } reduce 98
200 ) shift 227
77 { reduce 98
337 INSTANCEOF reduce 178
143 literal shift 59
198 NULL_LITERAL shift 53
133 >= reduce 137
22 IDENTIFIER shift 15
96 name shift 76
64 THIS shift 16
279 PRIVATE reduce 39
325 if_then_statement shift 91
127 simple_name shift 13
142 IDENTIFIER reduce 105
6 class_instance_creation_expression shift 18
198 statement_without_trailing_substatement shift 139
24 IMPLEMENTS reduce 23
266 ; shift 88
90 NULL_LITERAL shift 53
251 ^ reduce 20
251 ] reduce 20
322 conditional_expression shift 48
251 [ reduce 20
178 && reduce 144
89 primary_no_new_array shift 12
27 == reduce 158
325 if_then_else_statement shift 41
43 NEW shift 8
92 ~ shift 64
249 postfix_expression shift 27
333 CHARACTER_LITERAL shift 17
133 <= reduce 137
19 STATIC reduce 85
84 RETURN reduce 89
47 method_invocation shift 36
250 NEW shift 8
138 ELSE reduce 107
297 VOID reduce 57
89 primary shift 21
179 name shift 228
251 | reduce 20
223 assignment shift 66
27 <= reduce 158
82 CHARACTER_LITERAL reduce 106
45 NULL_LITERAL reduce 104
18 INSTANCEOF reduce 133
304 if_then_statement shift 91
323 constructor_declarator shift 229
321 expression shift 162
71 / shift 92
71 , reduce 171
190 [ reduce 16
71 - reduce 171
138 BYTE reduce 107
71 * shift 90
136 method_invocation shift 80
71 + reduce 171
278 simple_name shift 13
114 || reduce 143
71 ) reduce 171
279 SHORT reduce 39
78 exclusive_or_expression shift 10
71 & reduce 171
168 >= reduce 157
12 <= reduce 128
284 != reduce 166
71 % shift 89
87 NULL_LITERAL shift 53
124 method_invocation shift 36
273 . shift 230
71 > reduce 171
225 INT reduce 99
71 ? reduce 171
71 < reduce 171
71 : reduce 171
33 INT reduce 77
273 ; shift 231
71 ; reduce 171
154 BOOLEAN reduce 114
142 BYTE reduce 105
60 && reduce 146
263 WHILE shift 125
216 IDENTIFIER shift 15
90 CHARACTER_LITERAL shift 17
97 { reduce 80
168 == reduce 157
199 FINAL reduce 67
301 NEW shift 8
6 equality_expression shift 1
190 . shift 72
71 ^ reduce 171
190 , reduce 16
71 ] reduce 171
263 class_instance_creation_expression shift 123
105 STRING_LITERAL shift 55
224 STRING_LITERAL reduce 88
6 inclusive_or_expression shift 46
88 FOR reduce 108
83 || reduce 159
87 qualified_name shift 24
190 ( reduce 16
35 == reduce 1
220 && reduce 141
198 if_then_statement shift 91
71 | reduce 171
9 != reduce 147
258 VOID reduce 41
266 while_statement shift 77
223 literal shift 59
35 <= reduce 1
258 BOOLEAN reduce 41
6 conditional_or_expression shift 28
78 CHARACTER_LITERAL shift 17
239 primary_no_new_array shift 12
227 INTEGER_LITERAL shift 11
315 equality_expression shift 1
315 inclusive_or_expression shift 46
76 ^ reduce 154
8 name shift 190
303 expression shift 232
155 CLASS reduce 27
237 ; reduce 120
76 [ shift 124
5 SHORT reduce 95
296 != reduce 170
76 ] reduce 154
225 IDENTIFIER reduce 99
313 statement_no_short_if shift 233
305 || reduce 155
175 relational_expression shift 49
134 array_access shift 50
251 == reduce 20
134 qualified_name shift 24
304 name shift 31
37 STATIC reduce 46
143 conditional_and_expression shift 73
315 IDENTIFIER shift 15
147 relational_expression shift 234
76 > reduce 154
76 ? reduce 154
239 THIS shift 16
105 class_instance_creation_expression shift 18
303 array_creation_expression shift 56
41 ( reduce 97
105 additive_expression shift 235
179 qualified_name shift 24
76 : reduce 154
76 ; reduce 154
76 < reduce 154
76 . shift 72
76 / reduce 154
42 array_creation_expression shift 56
251 >= reduce 20
76 & reduce 154
210 integral_type shift 79
78 and_expression shift 23
76 ( shift 70
76 ) reduce 154
237 ( shift 6
76 * reduce 154
267 and_expression shift 23
41 ; reduce 97
76 + reduce 154
76 , reduce 154
76 - reduce 154
35 >= reduce 1
244 NATIVE reduce 42
267 assignment_expression shift 236
325 CHARACTER_LITERAL shift 17
76 % reduce 154
153 ABSTRACT reduce 39
244 IDENTIFIER reduce 42
0 ; reduce 29
198 name shift 31
269 ; shift 237
282 INTEGER_LITERAL shift 11
6 IDENTIFIER shift 15
78 assignment_expression shift 86
154 IF reduce 114
222 method_invocation shift 36
43 name shift 76
45 IDENTIFIER reduce 104
73 && shift 238
252 literal shift 59
44 postfix_expression shift 27
9 && reduce 147
87 array_access shift 50
143 INTEGER_LITERAL shift 11
105 NEW shift 8
40 BOOLEAN_LITERAL shift 35
251 <= reduce 20
216 INT shift 110
92 literal shift 59
224 NEW reduce 88
93 name shift 190
318 >= reduce 148
40 STRING_LITERAL shift 55
95 INT reduce 118
204 INT reduce 43
208 && reduce 151
249 literal shift 59
44 array_access shift 20
117 IDENTIFIER shift 206
51 IDENTIFIER reduce 19
313 WHILE shift 125
143 conditional_expression shift 48
102 ( shift 22
268 PRIVATE shift 204
315 relational_expression shift 49
268 NATIVE shift 186
102 = reduce 65
301 STRING_LITERAL shift 55
102 ; reduce 65
42 ( shift 6
62 - reduce 161
318 <= reduce 148
44 qualified_name shift 24
62 / reduce 161
41 } reduce 97
62 ) reduce 161
150 RETURN reduce 91
62 * reduce 161
62 + reduce 161
62 , reduce 161
302 PUBLIC reduce 76
322 name shift 31
62 % reduce 161
156 ( shift 239
62 & reduce 161
307 INTEGER_LITERAL shift 11
226 name shift 31
253 STRING_LITERAL shift 55
62 > reduce 161
62 ? reduce 161
253 BOOLEAN_LITERAL shift 35
62 : reduce 161
279 abstract_method_declaration shift 240
321 array_creation_expression shift 56
62 ; reduce 161
62 < reduce 161
100 field_access shift 54
249 unary_expression shift 241
263 empty_statement shift 142
266 block_statement shift 242
268 INTERFACE shift 243
6 relational_expression shift 49
245 BYTE shift 129
318 == reduce 148
253 left_hand_side shift 7
45 INT reduce 104
144 NULL_LITERAL reduce 116
62 ] reduce 161
313 class_instance_creation_expression shift 123
62 ^ reduce 161
283 ; reduce 94
8 BYTE shift 129
333 method_invocation shift 36
239 SHORT shift 25
204 IDENTIFIER reduce 43
183 PUBLIC reduce 28
41 { reduce 97
33 IDENTIFIER reduce 77
248 INTEGER_LITERAL reduce 109
204 NATIVE reduce 43
210 primitive_type shift 99
336 ; reduce 127
49 >= shift 100
33 NATIVE reduce 77
181 == reduce 163
29 ) reduce 8
336 ( reduce 127
41 RETURN reduce 97
62 | reduce 161
94 PRIVATE reduce 56
284 && reduce 166
154 BOOLEAN_LITERAL reduce 114
325 IF shift 187
248 BYTE reduce 109
60 != reduce 146
50 . reduce 136
335 ABSTRACT reduce 87
181 <= reduce 163
202 class_instance_creation_expression shift 18
50 = reduce 199
263 NEW shift 8
268 PROTECTED shift 244
253 class_instance_creation_expression shift 18
29 [ reduce 8
270 IMPLEMENTS reduce 49
336 { reduce 127
336 } reduce 127
49 <= shift 96
49 INSTANCEOF shift 245
318 INSTANCEOF reduce 148
22 type shift 246
250 literal shift 59
103 STATIC reduce 60
167 , shift 134
167 ) shift 247
96 INTEGER_LITERAL shift 11
12 >= reduce 128
50 [ reduce 136
94 BYTE reduce 56
258 ABSTRACT reduce 41
168 <= reduce 157
97 , reduce 80
49 == reduce 179
252 simple_name shift 13
303 inclusive_or_expression shift 46
89 IDENTIFIER shift 15
301 class_instance_creation_expression shift 18
57 IDENTIFIER reduce 59
181 >= reduce 163
249 simple_name shift 13
89 unary_expression_not_plus_minus shift 168
190 { reduce 16
55 || reduce 3
186 STATIC reduce 47
12 == reduce 128
47 class_instance_creation_expression shift 18
239 qualified_name shift 24
282 literal shift 59
78 left_hand_side shift 7
295 != reduce 177
70 primary shift 34
208 >= reduce 151
307 unary_expression_not_plus_minus shift 168
231 PRIVATE reduce 33
106 method_invocation shift 36
270 { reduce 49
216 name shift 108
235 | reduce 175
315 expression shift 112
266 qualified_name shift 24
52 [ reduce 13
106 NEW shift 8
169 class_instance_creation_expression shift 18
63 >= reduce 14
14 ; shift 248
124 field_access shift 32
132 PROTECTED reduce 75
95 BYTE reduce 118
237 expression shift 162
24 || reduce 23
96 unary_expression_not_plus_minus shift 168
264 || reduce 183
92 INTEGER_LITERAL shift 11
191 statement_without_trailing_substatement shift 5
235 ] reduce 175
33 PROTECTED reduce 77
235 ^ reduce 175
127 return_statement shift 138
257 && reduce 25
279 BOOLEAN reduce 39
63 == reduce 14
122 INSTANCEOF reduce 168
235 ; reduce 175
235 : reduce 175
235 - shift 249
226 relational_expression shift 49
235 , reduce 175
57 INT reduce 59
146 ( shift 250
244 PROTECTED reduce 42
5 BOOLEAN reduce 95
322 conditional_and_expression shift 73
231 INTERFACE reduce 33
224 ABSTRACT reduce 88
136 field_access shift 32
255 INTEGER_LITERAL reduce 92
208 <= reduce 151
127 class_instance_creation_expression shift 123
40 and_expression shift 23
325 BOOLEAN_LITERAL shift 35
15 { reduce 24
15 | reduce 24
105 BOOLEAN_LITERAL shift 35
235 < reduce 175
235 ? reduce 175
235 > reduce 175
253 assignment_expression shift 86
148 || reduce 173
313 FOR shift 182
303 IDENTIFIER shift 15
63 <= reduce 14
253 assignment shift 26
44 THIS shift 16
169 NEW shift 8
224 WHILE reduce 88
69 ] shift 251
208 == reduce 151
15 ] reduce 24
154 CHAR reduce 114
235 & reduce 175
15 ^ reduce 24
235 ) reduce 175
15 [ reduce 24
235 + shift 252
181 != reduce 163
259 ( shift 253
267 CHARACTER_LITERAL shift 17
210 array_type shift 137
15 / reduce 24
134 primary_no_new_array shift 12
15 - reduce 24
15 . reduce 24
164 IDENTIFIER reduce 34
15 + reduce 24
262 ] reduce 174
15 , reduce 24
15 ) reduce 24
15 * reduce 24
15 ( reduce 24
15 % reduce 24
15 & reduce 24
262 ^ reduce 174
333 class_instance_creation_expression shift 18
175 equality_expression shift 1
15 ? reduce 24
279 ABSTRACT reduce 39
222 field_access shift 54
15 = reduce 24
15 > reduce 24
15 ; reduce 24
15 < reduce 24
252 unary_expression shift 241
15 : reduce 24
132 PUBLIC reduce 75
322 equality_expression shift 1
226 equality_expression shift 1
92 unary_expression shift 254
262 < reduce 174
92 cast_expression shift 62
249 cast_expression shift 62
262 ; reduce 174
42 primary shift 34
262 : reduce 174
211 inclusive_or_expression shift 46
262 ? reduce 174
262 > reduce 174
222 || reduce 132
239 CHARACTER_LITERAL shift 17
252 cast_expression shift 62
307 name shift 76
6 name shift 31
266 statement shift 255
321 inclusive_or_expression shift 46
301 left_hand_side shift 7
211 conditional_or_expression shift 28
336 RETURN reduce 127
303 primary shift 34
282 name shift 170
333 NEW shift 8
70 qualified_name shift 24
136 for_update shift 256
313 STRING_LITERAL shift 55
322 relational_expression shift 49
266 primary shift 34
267 primary_no_new_array shift 12
19 VOID reduce 85
257 != reduce 25
118 INT reduce 40
172 THIS reduce 113
87 THIS shift 16
258 SHORT reduce 41
12 && reduce 128
78 THIS shift 16
44 NULL_LITERAL shift 53
262 | reduce 174
40 assignment shift 26
154 SHORT reduce 114
214 PUBLIC reduce 62
308 FINAL reduce 44
72 IDENTIFIER shift 257
181 && reduce 163
122 <= reduce 168
19 SHORT reduce 85
325 assignment shift 66
90 primary_no_new_array shift 12
277 FOR reduce 93
210 type shift 246
236 ; reduce 196
115 STATIC reduce 58
282 BYTE shift 129
191 literal shift 59
268 PUBLIC shift 258
77 INTEGER_LITERAL reduce 98
267 exclusive_or_expression shift 10
236 : reduce 196
122 == reduce 168
127 STRING_LITERAL shift 55
224 BOOLEAN reduce 88
321 conditional_or_expression shift 28
236 , reduce 196
220 <= reduce 141
150 NULL_LITERAL reduce 91
313 return_statement shift 138
154 CHARACTER_LITERAL reduce 114
9 <= reduce 147
8 class_type shift 259
210 reference_type shift 61
236 ) reduce 196
92 field_access shift 54
58 || reduce 156
47 STRING_LITERAL shift 55
54 != reduce 134
93 interface_type shift 260
263 STRING_LITERAL shift 55
330 simple_name shift 13
302 PRIVATE reduce 76
271 relational_expression shift 261
106 additive_expression shift 262
263 left_hand_side shift 7
122 >= reduce 168
144 RETURN reduce 116
220 == reduce 141
127 FOR shift 156
183 NATIVE reduce 28
191 INTEGER_LITERAL shift 11
173 | reduce 145
22 primitive_type shift 99
296 | reduce 170
262 ) reduce 174
262 & reduce 174
262 - shift 249
262 , reduce 174
262 + shift 252
173 ^ reduce 145
195 qualified_name shift 24
284 <= reduce 166
220 >= reduce 141
190 IMPLEMENTS reduce 16
40 CHARACTER_LITERAL shift 17
281 ) shift 263
216 PRIVATE shift 204
180 INSTANCEOF reduce 150
314 FINAL reduce 39
94 PUBLIC reduce 56
76 | reduce 154
152 equality_expression shift 264
64 qualified_name shift 24
246 IDENTIFIER shift 159
5 THIS reduce 95
284 == reduce 166
195 class_or_interface_type shift 63
139 NULL_LITERAL reduce 95
160 IMPORT reduce 31
323 simple_name shift 265
253 NEW shift 8
173 ; reduce 145
173 : reduce 145
173 < reduce 145
139 ELSE reduce 100
173 / reduce 145
173 . reduce 145
302 BYTE reduce 76
325 primary_no_new_array shift 12
173 & reduce 145
173 ) reduce 145
239 assignment shift 66
92 simple_name shift 13
173 + reduce 145
173 * reduce 145
173 - reduce 145
173 , reduce 145
158 variable_declarator_id shift 188
127 for_statement shift 225
173 % reduce 145
42 equality_expression shift 1
132 NATIVE reduce 75
173 [ reduce 145
64 primary shift 21
173 ] reduce 145
335 CHAR reduce 87
244 PUBLIC reduce 42
172 NULL_LITERAL reduce 113
216 BYTE shift 129
321 IDENTIFIER shift 15
342 STATIC reduce 30
325 qualified_name shift 24
54 && reduce 134
251 && reduce 20
91 CHARACTER_LITERAL reduce 96
173 ? reduce 145
173 > reduce 145
144 SHORT reduce 116
84 block_statements shift 266
6 array_creation_expression shift 56
127 WHILE shift 146
267 assignment shift 26
183 PROTECTED reduce 28
118 NATIVE reduce 40
9 == reduce 147
245 name shift 108
36 || reduce 135
134 CHARACTER_LITERAL shift 17
180 || reduce 150
7 assignment_operator shift 267
183 IDENTIFIER reduce 28
274 return_statement shift 138
118 IDENTIFIER reduce 40
199 BOOLEAN reduce 67
153 modifiers shift 268
106 field_access shift 54
244 INT reduce 42
279 FINAL reduce 39
261 >= shift 100
9 >= reduce 147
267 BOOLEAN_LITERAL shift 35
52 ) reduce 13
307 literal shift 59
191 simple_name shift 13
274 for_statement shift 225
261 INSTANCEOF shift 245
303 conditional_or_expression shift 28
5 NULL_LITERAL reduce 95
106 unary_expression shift 241
13 <= reduce 22
261 == reduce 180
220 ] reduce 141
304 block shift 45
318 && reduce 148
220 ^ reduce 141
282 INT shift 110
46 || reduce 188
240 PUBLIC reduce 86
323 PUBLIC shift 258
59 <= reduce 130
296 >= reduce 170
78 STRING_LITERAL shift 55
217 { reduce 68
180 >= reduce 150
41 INT reduce 97
129 IDENTIFIER reduce 10
6 INTEGER_LITERAL shift 11
173 == reduce 145
247 <= reduce 149
258 FINAL reduce 41
223 name shift 31
261 <= shift 96
199 VOID reduce 67
124 simple_name shift 13
220 | reduce 141
13 == reduce 22
301 assignment_expression shift 86
339 { reduce 52
6 ( shift 6
222 STRING_LITERAL shift 55
274 statement_without_trailing_substatement shift 139
136 NEW shift 8
335 SHORT reduce 87
152 relational_expression shift 49
59 == reduce 130
150 THIS reduce 91
239 for_init shift 269
180 == reduce 150
301 assignment shift 26
227 IDENTIFIER shift 15
313 for_statement_no_short_if shift 4
173 >= reduce 145
224 FOR reduce 88
154 NULL_LITERAL reduce 114
266 block shift 45
247 == reduce 149
303 name shift 31
313 BOOLEAN_LITERAL shift 35
296 <= reduce 170
78 qualified_name shift 24
324 IDENTIFIER shift 270
172 } reduce 113
91 IF reduce 96
217 ; reduce 68
266 primary_no_new_array shift 12
239 BOOLEAN_LITERAL shift 35
323 reference_type shift 61
296 == reduce 170
155 ABSTRACT reduce 27
47 field_access shift 54
245 IDENTIFIER shift 15
144 CHARACTER_LITERAL reduce 116
172 { reduce 113
21 || reduce 153
277 WHILE reduce 93
204 INTERFACE reduce 43
94 INT reduce 56
1 == shift 271
173 <= reduce 145
192 INTERFACE reduce 32
143 field_access shift 32
154 NEW reduce 114
336 INT reduce 127
226 expression shift 272
157 ) reduce 72
157 , reduce 72
19 CHAR reduce 85
168 != reduce 157
263 while_statement_no_short_if shift 176
45 BYTE reduce 104
127 field_access shift 32
284 >= reduce 166
172 RETURN reduce 113
224 STATIC reduce 88
253 CHARACTER_LITERAL shift 17
225 INTEGER_LITERAL reduce 99
252 method_invocation shift 36
164 PUBLIC reduce 34
313 for_statement shift 225
100 INTEGER_LITERAL shift 11
76 != reduce 154
263 assignment shift 66
54 >= reduce 134
263 for_statement shift 225
278 name shift 273
272 ) shift 274
103 CHAR reduce 60
92 method_invocation shift 36
124 class_instance_creation_expression shift 18
13 >= reduce 22
169 left_hand_side shift 7
274 if_then_else_statement_no_short_if shift 151
314 method_declaration shift 275
89 ! shift 47
77 INT reduce 98
59 >= reduce 130
64 NULL_LITERAL shift 53
54 == reduce 134
247 >= reduce 149
307 simple_name shift 13
113 class_type shift 276
124 literal shift 59
224 CHARACTER_LITERAL reduce 88
70 array_creation_expression shift 56
194 dim_expr shift 178
204 PUBLIC reduce 43
191 if_then_statement shift 91
134 primary shift 34
306 ; shift 277
267 THIS shift 16
89 + shift 43
89 - shift 44
89 ( shift 42
54 <= reduce 134
297 STATIC reduce 57
87 assignment_expression shift 86
11 || reduce 0
227 field_access shift 54
257 <= reduce 25
80 ) reduce 111
343 >= reduce 142
80 . reduce 135
60 == reduce 146
87 CHARACTER_LITERAL shift 17
80 ; reduce 111
22 reference_type shift 61
275 PUBLIC reduce 61
144 BOOLEAN reduce 116
127 left_hand_side shift 7
240 STATIC reduce 86
304 literal shift 59
257 == reduce 25
266 statement_expression shift 14
89 ~ shift 64
192 PROTECTED reduce 32
60 >= reduce 146
44 primary_no_new_array shift 12
80 [ reduce 135
12 INSTANCEOF reduce 128
214 PRIVATE reduce 62
210 numeric_type shift 141
35 != reduce 1
2 PRIVATE reduce 45
37 CLASS reduce 46
343 <= reduce 142
252 unary_expression_not_plus_minus shift 168
250 conditional_and_expression shift 73
304 ( shift 6
153 IMPORT shift 278
257 >= reduce 25
207 interface_member_declarations shift 279
249 INTEGER_LITERAL shift 11
82 WHILE reduce 106
164 INTERFACE reduce 34
42 INT shift 110
263 FOR shift 182
226 array_creation_expression shift 56
143 IDENTIFIER shift 15
323 PROTECTED shift 244
224 SHORT reduce 88
12 != reduce 128
304 ; shift 88
242 BYTE reduce 90
249 method_invocation shift 36
304 simple_name shift 13
343 == reduce 142
70 NULL_LITERAL shift 53
231 IDENTIFIER reduce 33
90 qualified_name shift 24
82 INTEGER_LITERAL reduce 106
142 INT reduce 105
214 BYTE reduce 62
2 BYTE reduce 45
138 INT reduce 107
164 ; reduce 34
154 STRING_LITERAL reduce 114
210 simple_name shift 13
94 NATIVE reduce 56
134 ( shift 6
70 CHARACTER_LITERAL shift 17
318 != reduce 148
96 IDENTIFIER shift 15
202 BOOLEAN_LITERAL shift 35
181 INSTANCEOF reduce 163
333 BOOLEAN_LITERAL shift 35
339 , shift 280
96 field_access shift 54
139 ( reduce 95
266 THIS shift 16
322 expression shift 281
90 class_instance_creation_expression shift 18
10 && reduce 186
201 class_or_interface_type shift 101
22 CHAR shift 52
172 ( reduce 113
131 ; reduce 69
202 method_invocation shift 36
70 array_access shift 50
322 array_creation_expression shift 56
237 IDENTIFIER shift 15
172 ; reduce 113
198 array_creation_expression shift 56
303 equality_expression shift 1
5 STRING_LITERAL reduce 95
57 PROTECTED reduce 59
35 && reduce 1
0 IDENTIFIER reduce 29
43 array_creation_expression shift 56
92 name shift 76
57 NATIVE reduce 59
326 { reduce 51
333 simple_name shift 13
226 conditional_and_expression shift 73
248 IDENTIFIER reduce 109
33 } reduce 77
22 integral_type shift 79
131 { reduce 69
153 FINAL reduce 39
42 conditional_or_expression shift 28
144 THIS reduce 116
88 WHILE reduce 108
297 PUBLIC reduce 57
201 qualified_name shift 24
169 BOOLEAN_LITERAL shift 35
182 ( shift 282
44 primary shift 21
134 exclusive_or_expression shift 10
40 assignment_expression shift 86
263 field_access shift 32
202 STRING_LITERAL shift 55
83 INSTANCEOF reduce 159
303 relational_expression shift 49
64 ! shift 47
43 IDENTIFIER shift 15
169 method_invocation shift 36
94 PROTECTED reduce 56
64 ( shift 42
64 + shift 43
295 : reduce 177
17 ? reduce 2
295 < reduce 177
214 IDENTIFIER reduce 62
155 STATIC reduce 27
295 ; reduce 177
295 > reduce 177
158 variable_declarator shift 283
15 && reduce 24
17 : reduce 2
209 dim_exprs shift 284
64 - shift 44
17 > reduce 2
295 & reduce 177
17 ; reduce 2
323 type shift 285
17 < reduce 2
181 & reduce 163
252 INTEGER_LITERAL shift 11
20 INSTANCEOF reduce 136
181 ) reduce 163
17 / reduce 2
295 ) reduce 177
295 , reduce 177
16 <= reduce 131
295 + shift 252
181 % reduce 163
100 name shift 76
295 - shift 249
5 RETURN reduce 95
11 INSTANCEOF reduce 0
258 CHAR reduce 41
266 IF shift 187
262 && reduce 174
239 array_access shift 50
313 empty_statement shift 142
314 } shift 286
226 field_access shift 32
17 ] reduce 2
17 ^ reduce 2
17 [ reduce 2
40 class_instance_creation_expression shift 18
207 STATIC reduce 84
139 { reduce 95
139 } reduce 95
16 == reduce 131
249 unary_expression_not_plus_minus shift 168
191 FOR shift 156
274 name shift 31
100 unary_expression_not_plus_minus shift 168
202 NEW shift 8
27 : reduce 158
27 < reduce 158
27 ; reduce 158
27 > reduce 158
105 field_access shift 54
319 && shift 238
27 / reduce 158
139 CHARACTER_LITERAL reduce 95
295 | reduce 177
304 statement_without_trailing_substatement shift 139
239 STRING_LITERAL shift 55
181 ^ reduce 163
27 * reduce 158
202 simple_name shift 13
169 and_expression shift 23
27 ) reduce 158
27 , reduce 158
27 + reduce 158
181 ] reduce 163
341 INTEGER_LITERAL reduce 200
37 ABSTRACT reduce 46
27 - reduce 158
325 while_statement shift 77
169 literal shift 59
282 simple_name shift 13
342 PRIVATE reduce 30
16 >= reduce 131
186 CLASS reduce 47
227 array_creation_expression shift 56
27 & reduce 158
27 % reduce 158
181 / reduce 163
17 ) reduce 2
17 * reduce 2
207 IDENTIFIER reduce 84
8 IDENTIFIER shift 15
181 + reduce 163
17 - reduce 2
181 * reduce 163
17 . reduce 2
181 - reduce 163
17 + reduce 2
64 ~ shift 64
181 , reduce 163
17 , reduce 2
42 array_access shift 50
17 % reduce 2
17 & reduce 2
295 ^ reduce 177
295 ] reduce 177
181 ? reduce 163
295 ? reduce 177
181 > reduce 163
181 ; reduce 163
181 : reduce 163
77 BYTE reduce 98
181 < reduce 163
325 THIS shift 16
139 ; reduce 95
263 statement_no_short_if shift 287
27 | reduce 158
216 PROTECTED shift 244
291 IDENTIFIER reduce 83
313 simple_name shift 13
82 BYTE reduce 106
150 IF reduce 91
320 interface_body shift 288
321 ( shift 6
15 != reduce 24
86 ] reduce 201
255 INT reduce 92
313 method_invocation shift 80
95 IDENTIFIER reduce 118
84 WHILE reduce 89
33 PUBLIC reduce 77
57 } reduce 59
239 NULL_LITERAL shift 53
65 dims_opt shift 289
262 != reduce 174
145 || reduce 185
27 ^ reduce 158
86 , reduce 201
27 ] reduce 158
160 FINAL reduce 31
63 != reduce 14
242 WHILE reduce 90
86 ) reduce 201
90 THIS shift 16
333 literal shift 59
86 ; reduce 201
96 array_creation_expression shift 56
86 : reduce 201
181 | reduce 163
244 INTERFACE reduce 42
27 ? reduce 158
186 ABSTRACT reduce 47
325 WHILE shift 146
255 BYTE reduce 92
96 unary_expression shift 241
201 interface_type shift 290
225 BYTE reduce 99
106 STRING_LITERAL shift 55
274 literal shift 59
93 simple_name shift 13
137 IDENTIFIER reduce 15
198 IDENTIFIER shift 15
223 INTEGER_LITERAL shift 11
199 CHAR reduce 67
304 INTEGER_LITERAL shift 11
261 && reduce 180
263 CHARACTER_LITERAL shift 17
163 ] shift 60
321 ; reduce 120
60 <= reduce 146
305 INSTANCEOF reduce 155
103 VOID reduce 60
296 && reduce 170
216 NATIVE shift 186
274 method_invocation shift 80
267 left_hand_side shift 7
143 array_creation_expression shift 56
100 cast_expression shift 62
314 SHORT reduce 39
42 inclusive_or_expression shift 46
202 conditional_expression shift 48
274 simple_name shift 13
239 ( shift 6
168 && reduce 157
43 field_access shift 54
88 BOOLEAN reduce 108
172 SHORT reduce 113
100 method_invocation shift 36
76 && reduce 154
63 && reduce 14
87 array_creation_expression shift 56
315 conditional_and_expression shift 73
118 BYTE reduce 40
279 } shift 291
210 CHAR shift 52
322 IDENTIFIER shift 15
139 SHORT reduce 95
136 STRING_LITERAL shift 55
239 ; reduce 122
265 IDENTIFIER reduce 22
90 postfix_expression shift 27
37 BOOLEAN reduce 46
100 simple_name shift 13
64 array_access shift 20
173 && reduce 145
198 statement_expression shift 14
308 SHORT reduce 44
118 PRIVATE reduce 40
139 RETURN reduce 95
333 and_expression shift 23
301 CHARACTER_LITERAL shift 17
257 IMPLEMENTS reduce 25
223 simple_name shift 13
307 ! shift 47
325 class_instance_creation_expression shift 123
282 reference_type shift 61
133 INSTANCEOF reduce 137
19 FINAL reduce 85
216 simple_name shift 13
142 INTEGER_LITERAL reduce 105
70 , reduce 138
138 INTEGER_LITERAL reduce 107
89 array_creation_expression shift 56
70 ) reduce 138
70 ( shift 6
173 != reduce 145
313 NEW shift 8
183 INTERFACE reduce 28
91 BOOLEAN reduce 96
274 INTEGER_LITERAL shift 11
304 if_then_else_statement_no_short_if shift 151
172 CHARACTER_LITERAL reduce 113
252 multiplicative_expression shift 292
186 BOOLEAN reduce 47
261 != reduce 180
274 empty_statement shift 142
230 IDENTIFIER shift 257
30 ; reduce 64
105 THIS shift 16
223 method_invocation shift 80
91 THIS reduce 96
237 array_creation_expression shift 56
8 class_or_interface_type shift 293
325 left_hand_side shift 7
334 { reduce 54
315 array_creation_expression shift 56
127 assignment shift 66
207 PUBLIC reduce 84
40 THIS shift 16
84 BYTE reduce 89
250 field_access shift 32
336 NULL_LITERAL reduce 127
22 array_type shift 137
134 NULL_LITERAL shift 53
322 field_access shift 32
237 qualified_name shift 24
5 CHARACTER_LITERAL reduce 95
231 PUBLIC reduce 33
78 assignment shift 26
42 NULL_LITERAL shift 53
191 for_statement shift 225
47 unary_expression shift 294
267 class_instance_creation_expression shift 18
22 numeric_type shift 141
40 left_hand_side shift 7
220 != reduce 141
113 IDENTIFIER shift 15
302 IDENTIFIER reduce 76
226 IDENTIFIER shift 15
87 assignment shift 26
68 ) reduce 126
133 || reduce 137
334 , reduce 54
100 literal shift 59
20 || reduce 136
301 simple_name shift 13
257 INSTANCEOF reduce 25
105 qualified_name shift 24
136 assignment shift 66
124 and_expression shift 23
90 ( shift 42
343 && reduce 142
154 RETURN reduce 114
91 STRING_LITERAL reduce 96
90 ! shift 47
78 primary shift 34
70 relational_expression shift 49
250 inclusive_or_expression shift 46
90 + shift 43
90 - shift 44
313 primary_no_new_array shift 12
76 >= reduce 154
302 } reduce 76
134 STRING_LITERAL shift 55
11 != reduce 0
88 CHARACTER_LITERAL reduce 108
227 ( shift 42
186 SHORT reduce 47
227 ! shift 47
100 additive_expression shift 295
325 { shift 84
252 class_instance_creation_expression shift 18
76 == reduce 154
150 BOOLEAN_LITERAL reduce 91
237 INTEGER_LITERAL shift 11
333 INTEGER_LITERAL shift 11
124 assignment shift 26
100 STRING_LITERAL shift 55
338 && reduce 187
138 FOR reduce 107
64 name shift 76
89 unary_expression shift 296
330 name shift 190
248 FOR reduce 109
266 left_hand_side shift 7
76 <= reduce 154
315 field_access shift 32
90 ~ shift 64
249 STRING_LITERAL shift 55
274 STRING_LITERAL shift 55
308 NATIVE reduce 44
336 INTEGER_LITERAL reduce 127
89 cast_expression shift 62
301 NULL_LITERAL shift 53
168 , reduce 157
142 ; reduce 105
168 + reduce 157
2 INT reduce 45
203 != reduce 176
168 - reduce 157
239 primitive_type shift 99
168 * reduce 157
304 for_statement shift 225
168 ) reduce 157
78 ] shift 251
325 ( shift 6
168 / reduce 157
325 statement_expression shift 14
169 primary_no_new_array shift 12
168 < reduce 157
168 ; reduce 157
168 > reduce 157
282 class_or_interface_type shift 63
277 IF reduce 93
202 conditional_and_expression shift 73
168 : reduce 157
88 BYTE reduce 108
307 - shift 44
307 + shift 43
307 ( shift 42
168 ? reduce 157
92 class_instance_creation_expression shift 18
245 integral_type shift 79
90 primary shift 21
64 BOOLEAN_LITERAL shift 35
142 ( reduce 105
226 method_invocation shift 36
168 & reduce 157
168 % reduce 157
314 class_body_declaration shift 297
142 { reduce 105
127 primary_no_new_array shift 12
308 CHAR reduce 44
142 } reduce 105
183 ; reduce 28
82 CHAR reduce 106
307 ~ shift 64
303 literal shift 59
266 CHAR shift 52
94 } reduce 56
49 | reduce 179
38 , shift 195
227 ~ shift 64
168 | reduce 157
201 name shift 190
35 & reduce 1
38 ) shift 298
35 % reduce 1
22 simple_name shift 13
245 class_or_interface_type shift 63
301 array_access shift 50
316 IDENTIFIER reduce 26
45 ELSE reduce 104
47 INTEGER_LITERAL shift 11
92 NEW shift 8
250 conditional_or_expression shift 28
249 NEW shift 8
323 array_type shift 137
323 IDENTIFIER shift 15
202 primary_no_new_array shift 12
242 INT reduce 90
168 ^ reduce 157
264 && reduce 183
168 ] reduce 157
266 if_then_statement shift 91
251 || reduce 20
304 while_statement shift 77
301 THIS shift 16
325 ; shift 88
23 & shift 152
91 INT reduce 96
23 ) reduce 184
61 IDENTIFIER reduce 6
28 ] reduce 192
242 STRING_LITERAL reduce 90
49 ? reduce 179
49 < shift 106
49 ; reduce 179
49 > shift 105
224 NULL_LITERAL reduce 88
12 | reduce 128
144 CHAR reduce 116
35 [ reduce 1
238 inclusive_or_expression shift 299
134 expression shift 300
35 ^ reduce 1
242 BOOLEAN_LITERAL reduce 90
35 ] reduce 1
28 ? shift 301
303 array_access shift 50
130 ; shift 302
87 inclusive_or_expression shift 46
28 ; reduce 192
154 ( reduce 114
35 * reduce 1
41 BYTE reduce 97
35 ) reduce 1
124 name shift 31
35 , reduce 1
28 : reduce 192
35 + reduce 1
35 . reduce 1
35 - reduce 1
49 ^ reduce 179
87 IDENTIFIER shift 15
35 / reduce 1
49 ] reduce 179
282 primary shift 34
184 IDENTIFIER reduce 38
124 CHARACTER_LITERAL shift 17
28 , reduce 192
154 ; reduce 114
12 [ shift 303
35 : reduce 1
35 < reduce 1
12 ] reduce 128
35 ; reduce 1
28 ) reduce 192
12 ^ reduce 128
22 qualified_name shift 24
35 > reduce 1
82 IDENTIFIER reduce 106
35 ? reduce 1
136 CHARACTER_LITERAL shift 17
150 INT reduce 91
12 : reduce 128
318 || reduce 148
23 ^ reduce 184
12 + reduce 128
321 conditional_and_expression shift 73
23 ] reduce 184
12 , reduce 128
12 - reduce 128
12 . reduce 128
12 / reduce 128
0 IMPORT reduce 29
250 BOOLEAN_LITERAL shift 35
115 ABSTRACT reduce 58
12 ; reduce 128
1 && reduce 182
282 primitive_type shift 99
12 < reduce 128
303 conditional_and_expression shift 73
12 > reduce 128
12 ? reduce 128
16 && reduce 131
49 ) reduce 179
130 { shift 84
49 & reduce 179
42 INTEGER_LITERAL shift 11
198 for_statement shift 225
198 return_statement shift 138
23 ; reduce 184
239 array_type shift 137
70 equality_expression shift 1
23 ? reduce 184
91 WHILE reduce 96
329 ) shift 304
49 : reduce 179
12 % reduce 128
282 type shift 158
12 & reduce 128
250 STRING_LITERAL shift 55
23 : reduce 184
12 ) reduce 128
154 { reduce 114
12 * reduce 128
154 } reduce 114
250 left_hand_side shift 7
35 | reduce 1
23 , reduce 184
44 class_instance_creation_expression shift 18
49 , reduce 179
223 NEW shift 8
213 ^ reduce 164
5 FOR reduce 95
84 CHAR reduce 89
127 CHARACTER_LITERAL shift 17
15 IDENTIFIER reduce 24
213 ] reduce 164
255 STRING_LITERAL reduce 92
343 != reduce 142
40 field_access shift 32
43 primary shift 21
198 method_invocation shift 80
192 NATIVE reduce 32
37 BYTE reduce 46
250 class_instance_creation_expression shift 18
43 method_invocation shift 36
226 primary shift 34
139 CHAR reduce 95
213 | reduce 164
90 method_invocation shift 36
277 BOOLEAN reduce 93
321 primary_no_new_array shift 12
212 [ reduce 132
181 || reduce 163
308 BOOLEAN reduce 44
6 NULL_LITERAL shift 53
301 qualified_name shift 24
303 NULL_LITERAL shift 53
169 exclusive_or_expression shift 10
202 exclusive_or_expression shift 10
37 INTERFACE reduce 46
213 % reduce 164
282 method_invocation shift 80
301 literal shift 59
93 qualified_name shift 24
325 RETURN shift 87
43 unary_expression shift 305
1 != shift 147
238 and_expression shift 23
41 INTEGER_LITERAL reduce 97
17 | reduce 2
224 FINAL reduce 88
16 != reduce 131
108 INSTANCEOF reduce 16
214 STATIC reduce 62
212 . reduce 132
213 ? reduce 164
213 > reduce 164
106 primary_no_new_array shift 12
224 ELSE reduce 88
213 ; reduce 164
240 IDENTIFIER reduce 86
41 SHORT reduce 97
213 : reduce 164
213 < reduce 164
57 SHORT reduce 59
37 PROTECTED reduce 46
213 / reduce 164
297 INT reduce 57
213 + reduce 164
213 * reduce 164
284 dims shift 111
213 - reduce 164
42 simple_name shift 13
213 , reduce 164
213 & reduce 164
213 ) reduce 164
255 ; reduce 92
266 local_variable_declaration shift 306
191 primary shift 34
43 - shift 44
43 + shift 43
91 BOOLEAN_LITERAL reduce 96
277 SHORT reduce 93
234 INSTANCEOF shift 245
303 INTEGER_LITERAL shift 11
198 qualified_name shift 24
289 ) shift 307
224 THIS reduce 88
17 != reduce 2
82 NEW reduce 106
42 qualified_name shift 24
40 literal shift 59
238 exclusive_or_expression shift 10
89 array_access shift 20
195 IDENTIFIER shift 15
95 FOR reduce 118
115 PUBLIC reduce 58
304 qualified_name shift 24
268 STATIC shift 308
313 if_then_else_statement shift 41
19 } reduce 85
284 INSTANCEOF reduce 166
255 ( reduce 92
198 primary shift 34
241 INSTANCEOF reduce 167
250 name shift 31
47 NULL_LITERAL shift 53
257 IDENTIFIER reduce 25
134 relational_expression shift 49
239 primary shift 34
150 STRING_LITERAL reduce 91
202 and_expression shift 23
90 array_creation_expression shift 56
84 NEW reduce 89
6 literal shift 59
148 <= reduce 173
323 class_or_interface_type shift 63
0 PRIVATE reduce 29
266 empty_statement shift 142
92 IDENTIFIER shift 15
43 ! shift 47
325 array_creation_expression shift 56
40 simple_name shift 13
201 IDENTIFIER shift 15
99 [ shift 75
239 local_variable_declaration shift 309
105 primary_no_new_array shift 12
124 primary_no_new_array shift 12
43 ( shift 42
134 array_creation_expression shift 56
148 == reduce 173
280 simple_name shift 13
186 PRIVATE reduce 47
342 PUBLIC reduce 30
266 NEW shift 8
139 INTEGER_LITERAL reduce 95
237 array_access shift 50
63 ] reduce 14
63 ^ reduce 14
191 IDENTIFIER shift 15
321 expression_opt shift 310
198 { shift 84
301 INTEGER_LITERAL shift 11
208 ? reduce 151
178 || reduce 144
208 ; reduce 151
208 < reduce 151
106 postfix_expression shift 27
208 = reduce 151
333 assignment_expression shift 86
208 > reduce 151
29 IDENTIFIER reduce 8
47 array_access shift 20
208 : reduce 151
304 { shift 84
304 RETURN shift 87
333 left_hand_side shift 7
63 ? reduce 14
153 class_declaration shift 311
63 ; reduce 14
63 < reduce 14
249 array_creation_expression shift 56
336 IF reduce 127
23 | reduce 184
63 > reduce 14
0 PUBLIC reduce 29
63 : reduce 14
77 NEW reduce 98
208 [ reduce 151
2 PROTECTED reduce 45
323 name shift 108
208 ] reduce 151
41 NULL_LITERAL reduce 97
208 ^ reduce 151
105 unary_expression shift 241
5 NEW reduce 95
186 PUBLIC reduce 47
115 PROTECTED reduce 58
63 & reduce 14
47 THIS shift 16
250 and_expression shift 23
139 BOOLEAN reduce 95
43 ~ shift 64
70 NEW shift 8
42 literal shift 59
237 NULL_LITERAL shift 53
63 , reduce 14
235 >= reduce 175
198 RETURN shift 87
10 || reduce 186
63 ) reduce 14
208 / reduce 151
24 IDENTIFIER reduce 23
76 INSTANCEOF reduce 154
208 + reduce 151
208 , reduce 151
208 - reduce 151
208 . reduce 151
208 ) reduce 151
208 * reduce 151
186 VOID reduce 47
87 left_hand_side shift 7
208 % reduce 151
89 NULL_LITERAL shift 53
208 & reduce 151
266 numeric_type shift 141
235 == reduce 175
342 ABSTRACT reduce 30
323 STATIC shift 308
155 INTERFACE reduce 27
333 array_access shift 50
266 INTEGER_LITERAL shift 11
124 conditional_or_expression shift 28
183 CLASS reduce 28
64 primary_no_new_array shift 12
292 != reduce 172
6 qualified_name shift 24
57 PUBLIC reduce 59
226 ( shift 6
34 . shift 116
78 class_instance_creation_expression shift 18
319 ) reduce 191
169 THIS shift 16
319 , reduce 191
202 name shift 31
317 IDENTIFIER reduce 37
87 ; reduce 120
100 multiplicative_expression shift 71
144 IF reduce 116
252 primary shift 21
58 <= reduce 156
297 ABSTRACT reduce 57
267 qualified_name shift 24
44 NEW shift 8
214 CHAR reduce 62
221 ELSE reduce 117
303 field_access shift 32
87 ( shift 6
234 || reduce 181
139 NEW reduce 95
307 unary_expression shift 312
203 | reduce 176
239 INT shift 110
143 ( shift 6
121 ELSE shift 313
37 INT reduce 46
115 IDENTIFIER reduce 58
266 IDENTIFIER shift 15
172 NEW reduce 113
70 assignment shift 26
58 >= reduce 156
58 == reduce 156
115 INT reduce 58
297 IDENTIFIER reduce 57
118 FINAL reduce 40
169 conditional_expression shift 48
78 ( shift 6
225 THIS reduce 99
297 PROTECTED reduce 57
124 BOOLEAN_LITERAL shift 35
284 || reduce 166
94 class_body_declarations shift 314
315 ] shift 60
247 != reduce 149
203 ^ reduce 176
203 ] reduce 176
18 != reduce 133
237 THIS shift 16
191 method_invocation shift 80
242 CHARACTER_LITERAL reduce 90
267 primary shift 34
145 && reduce 185
77 IDENTIFIER reduce 98
63 | reduce 14
89 THIS shift 16
195 CHAR shift 52
132 IDENTIFIER reduce 75
325 method_invocation shift 80
332 != reduce 152
203 > reduce 176
203 ? reduce 176
124 exclusive_or_expression shift 10
122 : reduce 168
239 method_invocation shift 80
223 class_instance_creation_expression shift 123
122 ; reduce 168
292 && reduce 172
122 < reduce 168
36 >= reduce 135
122 - reduce 168
189 = reduce 197
6 simple_name shift 13
315 ( shift 6
122 / reduce 168
87 STRING_LITERAL shift 55
122 ) reduce 168
274 ( shift 6
122 * reduce 168
303 assignment_expression shift 86
189 [ shift 315
136 INTEGER_LITERAL shift 11
122 + reduce 168
122 , reduce 168
122 % reduce 168
303 simple_name shift 13
314 NATIVE reduce 39
122 & reduce 168
183 STATIC reduce 28
279 IDENTIFIER reduce 39
227 class_instance_creation_expression shift 18
279 STATIC reduce 39
267 array_creation_expression shift 56
148 >= reduce 173
252 name shift 76
71 INSTANCEOF reduce 171
143 STRING_LITERAL shift 55
194 | reduce 166
342 NATIVE reduce 30
84 INTEGER_LITERAL reduce 89
307 array_creation_expression shift 56
111 || reduce 165
321 conditional_expression shift 48
105 CHARACTER_LITERAL shift 17
142 RETURN reduce 105
153 type_declaration shift 316
216 SHORT shift 25
87 class_instance_creation_expression shift 18
132 STATIC reduce 75
253 field_access shift 32
148 INSTANCEOF reduce 173
274 ; shift 88
122 > reduce 168
122 ? reduce 168
11 && reduce 0
194 ^ reduce 166
42 relational_expression shift 49
122 | reduce 168
194 [ shift 202
307 cast_expression shift 62
36 INSTANCEOF reduce 135
323 INT shift 110
194 ] reduce 166
36 <= reduce 135
220 ) reduce 141
220 * reduce 141
42 CHARACTER_LITERAL shift 17
220 % reduce 141
241 || reduce 167
220 & reduce 141
319 ; reduce 191
239 class_or_interface_type shift 63
264 == shift 271
319 : reduce 191
319 ? reduce 191
70 INTEGER_LITERAL shift 11
150 BOOLEAN reduce 91
51 || reduce 19
122 ] reduce 168
122 ^ reduce 168
160 ; reduce 31
247 && reduce 149
44 unary_expression_not_plus_minus shift 168
194 ? reduce 166
220 ? reduce 141
194 > reduce 166
44 IDENTIFIER shift 15
194 ; reduce 166
220 ; reduce 141
194 : reduce 166
220 < reduce 141
342 IDENTIFIER reduce 30
189 ( shift 70
103 BOOLEAN reduce 60
194 < reduce 166
220 > reduce 141
109 IDENTIFIER reduce 21
342 CLASS reduce 30
134 equality_expression shift 1
36 == reduce 135
210 BOOLEAN shift 29
143 class_instance_creation_expression shift 18
194 / reduce 166
220 / reduce 141
40 conditional_and_expression shift 73
253 conditional_expression shift 48
333 NULL_LITERAL shift 53
194 . reduce 166
2 BOOLEAN reduce 45
319 ] reduce 191
194 + reduce 166
220 + reduce 141
267 method_invocation shift 36
194 * reduce 166
220 , reduce 141
194 - reduce 166
220 - reduce 141
321 field_access shift 32
194 , reduce 166
220 . reduce 141
194 & reduce 166
336 CHARACTER_LITERAL reduce 127
194 ) reduce 166
220 : reduce 141
274 { shift 84
189 . shift 72
84 IDENTIFIER reduce 89
332 && reduce 152
325 primary shift 34
194 % reduce 166
164 PROTECTED reduce 34
9 ] reduce 147
9 ^ reduce 147
13 || reduce 22
333 IDENTIFIER shift 15
9 [ reduce 147
266 type shift 158
5 CHAR reduce 95
231 NATIVE reduce 33
84 SHORT reduce 89
237 equality_expression shift 1
250 ( shift 6
153 interface_declaration shift 317
59 || reduce 130
100 ~ shift 64
263 return_statement shift 138
297 BYTE reduce 57
261 || reduce 180
87 and_expression shift 23
9 | reduce 147
100 CHARACTER_LITERAL shift 17
313 left_hand_side shift 7
338 ^ shift 177
202 field_access shift 32
136 simple_name shift 13
82 SHORT reduce 106
321 and_expression shift 23
132 INT reduce 75
338 ] reduce 187
325 STRING_LITERAL shift 55
45 { reduce 104
45 } reduce 104
294 || reduce 160
20 != reduce 136
122 && reduce 168
239 field_access shift 32
100 - shift 44
100 + shift 43
343 | reduce 142
105 primary shift 21
9 % reduce 147
9 & reduce 147
9 ) reduce 147
9 * reduce 147
9 - reduce 147
116 IDENTIFIER shift 318
9 . reduce 147
9 + reduce 147
9 , reduce 147
279 INT reduce 39
9 / reduce 147
263 method_invocation shift 80
9 : reduce 147
191 left_hand_side shift 7
194 && reduce 166
9 > reduce 147
9 ; reduce 147
322 array_access shift 50
9 < reduce 147
9 ? reduce 147
239 left_hand_side shift 7
21 <= reduce 153
100 ( shift 42
204 BYTE reduce 43
321 method_invocation shift 36
191 BOOLEAN_LITERAL shift 35
263 name shift 31
100 ! shift 47
335 STATIC reduce 87
203 : reduce 176
175 conditional_and_expression shift 319
105 method_invocation shift 36
203 < reduce 176
203 ; reduce 176
242 ; reduce 90
91 RETURN reduce 96
304 THIS shift 16
49 && reduce 179
296 : reduce 170
296 ; reduce 170
314 CHAR reduce 39
87 primary shift 34
296 > reduce 170
203 - shift 249
296 ? reduce 170
315 primary_no_new_array shift 12
296 < reduce 170
302 INT reduce 76
203 ) reduce 176
203 , reduce 176
203 + shift 252
111 INSTANCEOF reduce 165
203 & reduce 176
191 field_access shift 32
296 * reduce 170
224 INTEGER_LITERAL reduce 88
296 + reduce 170
22 BOOLEAN shift 29
64 class_instance_creation_expression shift 18
296 ) reduce 170
244 STATIC reduce 42
92 unary_expression_not_plus_minus shift 168
296 / reduce 170
169 inclusive_or_expression shift 46
296 , reduce 170
242 ( reduce 90
296 - reduce 170
313 while_statement_no_short_if shift 176
11 >= reduce 0
78 conditional_or_expression shift 28
247 ; reduce 149
247 : reduce 149
186 CHAR reduce 47
247 / reduce 149
247 . reduce 149
247 - reduce 149
247 , reduce 149
172 IF reduce 113
296 ^ reduce 170
96 NULL_LITERAL shift 53
296 ] reduce 170
53 INSTANCEOF reduce 4
247 & reduce 149
247 % reduce 149
247 + reduce 149
192 PRIVATE reduce 32
247 * reduce 149
247 ) reduce 149
282 field_access shift 32
172 BOOLEAN reduce 113
8 simple_name shift 13
106 BOOLEAN_LITERAL shift 35
20 && reduce 136
78 inclusive_or_expression shift 46
155 PROTECTED reduce 27
97 extends_interfaces shift 320
172 INTEGER_LITERAL reduce 113
275 PRIVATE reduce 61
239 name shift 170
322 NULL_LITERAL shift 53
245 CHAR shift 52
323 BYTE shift 129
216 PUBLIC shift 258
136 literal shift 59
11 == reduce 0
282 IDENTIFIER shift 15
237 relational_expression shift 49
198 primary_no_new_array shift 12
124 qualified_name shift 24
296 & reduce 170
124 conditional_expression shift 48
202 left_hand_side shift 7
248 NULL_LITERAL reduce 109
296 % reduce 170
321 exclusive_or_expression shift 10
226 STRING_LITERAL shift 55
57 ABSTRACT reduce 59
322 simple_name shift 13
95 SHORT reduce 118
98 ; shift 321
236 ] reduce 196
277 NEW reduce 93
223 left_hand_side shift 7
222 class_instance_creation_expression shift 18
139 THIS reduce 95
266 class_or_interface_type shift 63
333 field_access shift 32
11 <= reduce 0
282 left_hand_side shift 7
214 NATIVE reduce 62
257 || reduce 25
47 unary_expression_not_plus_minus shift 168
134 assignment shift 26
73 ) reduce 190
87 name shift 31
49 != reduce 179
216 class_or_interface_type shift 63
105 ! shift 47
199 } reduce 67
45 RETURN reduce 104
250 primary_no_new_array shift 12
253 exclusive_or_expression shift 10
73 , reduce 190
1 | reduce 182
255 RETURN reduce 92
43 primary_no_new_array shift 12
16 | reduce 131
70 literal shift 59
105 ( shift 42
105 - shift 44
235 <= reduce 175
110 ) reduce 12
105 + shift 43
8 numeric_type shift 141
198 ( shift 6
110 [ reduce 12
245 numeric_type shift 141
225 } reduce 99
225 { reduce 99
224 VOID reduce 88
143 inclusive_or_expression shift 46
118 PUBLIC reduce 40
211 relational_expression shift 49
187 ( shift 322
250 exclusive_or_expression shift 10
248 NEW reduce 109
300 , reduce 139
223 field_access shift 32
300 ) reduce 139
1 ^ reduce 182
1 ] reduce 182
108 || reduce 16
204 PROTECTED reduce 43
242 } reduce 90
321 name shift 31
113 name shift 190
242 { reduce 90
2 INTERFACE reduce 45
73 ] reduce 190
253 primary shift 34
321 left_hand_side shift 7
96 simple_name shift 13
96 NEW shift 8
198 ; shift 88
82 FOR reduce 106
321 BOOLEAN_LITERAL shift 35
275 NATIVE reduce 61
138 WHILE reduce 107
208 | reduce 151
91 ( reduce 96
106 name shift 76
89 INTEGER_LITERAL shift 11
314 modifiers shift 323
195 numeric_type shift 141
73 ? reduce 190
335 BYTE reduce 87
299 ) reduce 189
73 : reduce 190
73 ; reduce 190
299 , reduce 189
268 CLASS shift 324
239 IDENTIFIER shift 15
132 ABSTRACT reduce 75
33 BYTE reduce 77
299 : reduce 189
299 ; reduce 189
253 primary_no_new_array shift 12
226 inclusive_or_expression shift 46
299 ? reduce 189
42 assignment shift 26
207 PRIVATE reduce 84
245 simple_name shift 13
225 ( reduce 99
343 > reduce 142
287 ELSE shift 325
343 ? reduce 142
169 qualified_name shift 24
304 array_creation_expression shift 56
250 method_invocation shift 36
343 : reduce 142
343 ; reduce 142
17 && reduce 2
343 < reduce 142
274 statement_expression shift 14
21 == reduce 153
137 | reduce 15
191 name shift 31
343 - reduce 142
43 STRING_LITERAL shift 55
343 . reduce 142
343 / reduce 142
266 NULL_LITERAL shift 53
343 ) reduce 142
55 INSTANCEOF reduce 3
299 ] reduce 189
343 * reduce 142
315 conditional_expression shift 48
41 IDENTIFIER reduce 97
343 + reduce 142
343 , reduce 142
343 % reduce 142
153 CLASS reduce 39
150 ( reduce 91
343 & reduce 142
186 NATIVE reduce 47
60 ; reduce 146
343 ] reduce 142
60 : reduce 146
343 ^ reduce 142
90 BOOLEAN_LITERAL shift 35
60 ? reduce 146
207 VOID reduce 84
60 > reduce 146
60 < reduce 146
263 if_then_else_statement_no_short_if shift 151
224 IF reduce 88
240 PROTECTED reduce 86
91 ; reduce 96
150 ; reduce 91
242 RETURN reduce 90
60 & reduce 146
60 % reduce 146
21 >= reduce 153
60 + reduce 146
60 * reduce 146
60 ) reduce 146
250 primary shift 34
60 / reduce 146
60 . reduce 146
267 conditional_expression shift 48
253 method_invocation shift 36
60 - reduce 146
78 conditional_expression shift 48
60 , reduce 146
266 statement_without_trailing_substatement shift 5
88 INT reduce 108
255 { reduce 92
16 % reduce 131
153 IDENTIFIER reduce 35
255 } reduce 92
124 inclusive_or_expression shift 46
16 & reduce 131
137 , reduce 15
312 || reduce 162
60 [ reduce 146
16 ) reduce 131
274 CHARACTER_LITERAL shift 17
338 , reduce 187
16 + reduce 131
137 ) reduce 15
277 NULL_LITERAL reduce 93
16 * reduce 131
16 - reduce 131
45 ( reduce 104
60 ^ reduce 146
16 , reduce 131
137 & reduce 15
88 STRING_LITERAL reduce 108
19 BOOLEAN reduce 85
60 ] reduce 146
16 / reduce 131
47 NEW shift 8
338 ) reduce 187
16 . reduce 131
314 BOOLEAN reduce 39
322 literal shift 59
137 ? reduce 15
338 ? reduce 187
137 > reduce 15
137 < reduce 15
338 : reduce 187
137 ; reduce 15
282 local_variable_declaration shift 309
338 ; reduce 187
1 ; reduce 182
137 : reduce 15
88 BOOLEAN_LITERAL reduce 108
1 : reduce 182
16 ; reduce 131
16 : reduce 131
1 ? reduce 182
16 < reduce 131
40 INTEGER_LITERAL shift 11
237 NEW shift 8
16 ? reduce 131
16 > reduce 131
0 NATIVE reduce 29
70 THIS shift 16
1 & reduce 182
270 super shift 326
90 STRING_LITERAL shift 55
1 , reduce 182
136 THIS shift 16
323 ABSTRACT shift 2
57 BYTE reduce 59
1 ) reduce 182
65 dims shift 111
60 | reduce 146
321 primary shift 34
105 ~ shift 64
91 { reduce 96
225 ; reduce 99
91 } reduce 96
295 && reduce 177
150 { reduce 91
137 ^ reduce 15
169 STRING_LITERAL shift 55
150 } reduce 91
137 ] reduce 15
137 [ shift 327
266 reference_type shift 61
64 IDENTIFIER shift 15
240 BYTE reduce 86
16 [ reduce 131
169 assignment shift 26
16 ] reduce 131
224 PRIVATE reduce 88
16 ^ reduce 131
45 ; reduce 104
223 IDENTIFIER shift 15
341 IDENTIFIER reduce 200
100 array_creation_expression shift 56
193 ] reduce 193
143 and_expression shift 23
227 name shift 76
78 BOOLEAN_LITERAL shift 35
22 formal_parameter_list shift 328
192 IMPORT reduce 32
5 IF reduce 95
237 literal shift 59
282 class_instance_creation_expression shift 123
223 for_update shift 329
193 : reduce 193
193 ; reduce 193
47 literal shift 59
0 FINAL reduce 29
47 simple_name shift 13
274 array_creation_expression shift 56
107 IDENTIFIER reduce 48
89 simple_name shift 13
325 for_statement shift 225
231 FINAL reduce 33
150 CHARACTER_LITERAL reduce 91
216 ABSTRACT shift 2
115 BYTE reduce 58
222 BOOLEAN_LITERAL shift 35
42 BOOLEAN shift 29
40 NEW shift 8
267 ( shift 6
312 INSTANCEOF reduce 162
252 IDENTIFIER shift 15
106 class_instance_creation_expression shift 18
142 THIS reduce 105
67 ) reduce 140
266 array_access shift 50
251 INSTANCEOF reduce 20
67 , reduce 140
134 THIS shift 16
53 || reduce 4
193 ) reduce 193
222 primary_no_new_array shift 12
127 method_invocation shift 80
193 , reduce 193
239 BYTE shift 129
277 INTEGER_LITERAL reduce 93
235 != reduce 175
336 BOOLEAN reduce 127
94 BOOLEAN reduce 56
58 && reduce 156
301 equality_expression shift 1
172 CHAR reduce 113
153 STATIC reduce 39
198 if_then_else_statement_no_short_if shift 151
326 IMPLEMENTS shift 330
323 primitive_type shift 99
186 FINAL reduce 47
78 name shift 31
26 ] reduce 195
17 >= reduce 2
42 expression shift 331
227 BOOLEAN_LITERAL shift 35
6 THIS shift 16
295 == reduce 177
207 NATIVE reduce 84
208 != reduce 151
308 VOID reduce 44
139 IF reduce 95
333 conditional_and_expression shift 73
127 name shift 31
232 ] shift 332
314 PRIVATE reduce 39
253 name shift 31
74 ( shift 333
252 field_access shift 54
26 ; reduce 195
40 NULL_LITERAL shift 53
26 : reduce 195
21 && reduce 153
295 <= reduce 177
78 primary_no_new_array shift 12
301 relational_expression shift 49
244 BYTE reduce 42
267 inclusive_or_expression shift 46
26 , reduce 195
96 cast_expression shift 62
307 THIS shift 16
280 interface_type shift 334
26 ) reduce 195
314 VOID reduce 39
70 expression shift 67
17 <= reduce 2
95 INTEGER_LITERAL reduce 118
140 ; shift 335
304 statement_expression shift 14
58 != reduce 156
254 : reduce 169
195 SHORT shift 25
254 ; reduce 169
254 < reduce 169
254 > reduce 169
226 BOOLEAN_LITERAL shift 35
254 ? reduce 169
286 IDENTIFIER reduce 55
315 and_expression shift 23
87 primary_no_new_array shift 12
275 CHAR reduce 61
254 ) reduce 169
308 PRIVATE reduce 44
254 * reduce 169
254 + reduce 169
254 , reduce 169
336 ELSE reduce 127
225 RETURN reduce 99
254 - reduce 169
254 / reduce 169
17 == reduce 2
202 assignment_expression shift 86
254 % reduce 169
23 && reduce 184
254 & reduce 169
295 >= reduce 177
59 INSTANCEOF reduce 130
143 name shift 31
253 and_expression shift 23
266 if_then_else_statement shift 41
237 simple_name shift 13
315 name shift 31
277 CHAR reduce 93
211 equality_expression shift 1
114 INSTANCEOF reduce 143
126 ; shift 336
292 > reduce 172
292 ? reduce 172
210 qualified_name shift 24
252 postfix_expression shift 27
13 INSTANCEOF reduce 22
84 FOR reduce 89
292 : reduce 172
292 ; reduce 172
100 unary_expression shift 241
292 < reduce 172
263 for_statement_no_short_if shift 4
54 ] reduce 134
54 [ reduce 134
254 | reduce 169
54 ^ reduce 134
332 ] reduce 152
332 [ reduce 152
202 IDENTIFIER shift 15
247 | reduce 149
96 literal shift 59
25 IDENTIFIER reduce 11
18 | reduce 133
322 INTEGER_LITERAL shift 11
245 reference_type shift 337
332 ^ reduce 152
267 STRING_LITERAL shift 55
127 BOOLEAN_LITERAL shift 35
292 % shift 89
64 postfix_expression shift 27
315 BOOLEAN_LITERAL shift 35
117 method_declarator shift 217
227 primary_no_new_array shift 12
292 / shift 92
54 < reduce 134
154 THIS reduce 114
54 ; reduce 134
54 : reduce 134
143 conditional_or_expression shift 28
191 class_instance_creation_expression shift 123
263 primary_no_new_array shift 12
254 ] reduce 169
254 ^ reduce 169
54 ? reduce 134
54 > reduce 134
292 & reduce 172
332 | reduce 152
315 conditional_or_expression shift 28
292 ) reduce 172
292 * shift 90
292 + reduce 172
292 , reduce 172
292 - reduce 172
54 - reduce 134
18 ) reduce 133
54 , reduce 134
54 + reduce 134
315 exclusive_or_expression shift 10
54 * reduce 134
18 & reduce 133
227 method_invocation shift 36
336 THIS reduce 127
247 [ reduce 149
18 % reduce 133
54 / reduce 134
54 . reduce 134
332 - reduce 152
54 % reduce 134
332 , reduce 152
332 + reduce 152
18 / reduce 133
332 * reduce 152
18 . reduce 133
54 ) reduce 134
18 - reduce 133
18 , reduce 133
132 BYTE reduce 75
144 NEW reduce 116
332 / reduce 152
18 + reduce 133
332 . reduce 152
54 & reduce 134
18 * reduce 133
240 INT reduce 86
332 % reduce 152
332 ) reduce 152
332 & reduce 152
266 SHORT shift 25
275 VOID reduce 61
247 ? reduce 149
263 BOOLEAN_LITERAL shift 35
247 > reduce 149
18 ? reduce 133
124 ( shift 6
169 CHARACTER_LITERAL shift 17
247 < reduce 149
18 > reduce 133
42 THIS shift 16
18 < reduce 133
18 ; reduce 133
18 : reduce 133
191 WHILE shift 146
143 primary shift 34
195 type shift 246
87 conditional_or_expression shift 28
124 STRING_LITERAL shift 55
226 conditional_or_expression shift 28
153 PUBLIC reduce 39
95 NEW reduce 118
315 primary shift 34
226 conditional_expression shift 48
332 = reduce 152
247 ^ reduce 149
332 < reduce 152
274 assignment shift 66
247 ] reduce 149
332 ; reduce 152
332 : reduce 152
18 ^ reduce 133
18 ] reduce 133
332 ? reduce 152
18 [ reduce 133
332 > reduce 152
174 exclusive_or_expression shift 338
122 != reduce 168
87 BOOLEAN_LITERAL shift 35
40 array_access shift 50
330 interface_type_list shift 339
227 primary shift 21
222 name shift 76
143 exclusive_or_expression shift 10
337 ^ reduce 178
337 ] reduce 178
143 BOOLEAN_LITERAL shift 35
6 expression shift 340
89 literal shift 59
77 SHORT reduce 98
8 integral_type shift 79
8 CHAR shift 52
249 THIS shift 16
87 exclusive_or_expression shift 10
239 class_instance_creation_expression shift 123
337 | reduce 178
105 multiplicative_expression shift 71
302 PROTECTED reduce 76
266 FOR shift 156
7 = shift 341
20 >= reduce 136
95 NULL_LITERAL reduce 118
138 IDENTIFIER reduce 107
337 & reduce 178
78 method_invocation shift 36
313 field_access shift 32
279 BYTE reduce 39
292 | reduce 172
228 ; shift 342
313 IDENTIFIER shift 15
248 CHAR reduce 109
225 CHARACTER_LITERAL reduce 99
20 == reduce 136
87 method_invocation shift 36
235 && reduce 175
250 conditional_expression shift 48
194 dims_opt shift 343
100 qualified_name shift 24
292 ^ reduce 172
255 CHARACTER_LITERAL reduce 92
207 CHAR reduce 84
191 return_statement shift 138
194 != reduce 166
337 < reduce 178
266 expression_statement shift 82
337 ; reduce 178
337 : reduce 178
118 SHORT reduce 40
337 ? reduce 178
337 > reduce 178
322 NEW shift 8
315 method_invocation shift 36
292 ] reduce 172
143 method_invocation shift 36
54 | reduce 134
228 . shift 72
216 STATIC shift 308
224 CHAR reduce 88
77 FOR reduce 98
20 <= reduce 136
337 , reduce 178
47 cast_expression shift 62
337 ) reduce 178
142 ELSE reduce 105
144 INTEGER_LITERAL reduce 116
263 primary shift 34