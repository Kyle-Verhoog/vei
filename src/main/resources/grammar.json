{
   "startingSymbol": "start_state",
   "terminals": ["BOF", "EOF", "IDENTIFIER", "INTEGER_LITERAL", "BOOLEAN_LITERAL", "CHARACTER_LITERAL", "STRING_LITERAL", "NULL_LITERAL", "!", "%", "&", "&&", "(", ")", "*", "+", ",", "-", ".", "/", ":", ";", "<", "=", "!=", "<=", ">=", "==", ">", "?", "ABSTRACT", "BOOLEAN", "BYTE", "CHAR", "CLASS", "ELSE", "EXTENDS", "FINAL", "FOR", "IF", "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", "INTERFACE", "NATIVE", "NEW", "", "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", "SUPER", "THIS", "VOID", "WHILE", "[", "]", "^", "{", "|", "||", "}", "~"],
   "nonterminals": ["shift_expression", "start_state", "compilation_unit", "method_declarator", "constructor_declarator", "abstract_method_declaration", "additive_expression", "and_expression", "argument_list", "array_access", "array_creation_expression", "array_type", "assignment", "assignment_expression", "assignment_operator", "block", "block_statement", "block_statements", "cast_expression", "class_body", "class_body_declaration", "class_body_declarations", "class_declaration", "class_instance_creation_expression", "class_member_declaration", "class_or_interface_type", "class_type", "conditional_and_expression", "conditional_expression", "conditional_or_expression", "constant_expression", "constructor_declaration", "dim_exprs", "dims", "empty_statement", "equality_expression", "exclusive_or_expression", "expression", "expression_opt", "expression_statement", "extends_interfaces", "field_access", "field_declaration", "for_init", "for_statement", "for_statement_no_short_if", "for_update", "formal_parameter", "formal_parameter_list", "if_then_else_statement", "if_then_else_statement_no_short_if", "if_then_statement", "import_declaration", "import_declarations", "inclusive_or_expression", "integral_type", "interface_body", "interface_declaration", "interface_member_declaration", "interface_member_declarations", "interface_type", "interface_type_list", "interfaces", "left_hand_side", "literal", "local_variable_declaration", "local_variable_declaration_statement", "method_body", "method_declaration", "method_header", "method_invocation", "modifier", "modifiers", "multiplicative_expression", "name", "numeric_type", "package_declaration", "postfix_expression", "primary", "primary_no_new_array", "primitive_type", "qualified_name", "reference_type", "relational_expression", "return_statement", "simple_name", "single_type_import_declaration", "statement", "statement_expression", "statement_no_short_if", "statement_without_trailing_substatement", "super", "type", "type_declaration", "type_import_on_demand_declaration", "unary_expression", "unary_expression_not_plus_minus", "variable_declarator", "variable_declarator_id", "variable_initializer", "while_statement", "while_statement_no_short_if"],
   "productionRules":
      {
         "start_state": [
            "BOF compilation_unit EOF"
         ],
         "literal": [
            "INTEGER_LITERAL",
            "BOOLEAN_LITERAL",
            "CHARACTER_LITERAL",
            "STRING_LITERAL",
            "NULL_LITERAL"
         ],
         "type": [
            "primitive_type",
            "reference_type"
         ],
         "primitive_type": [
            "numeric_type",
            "BOOLEAN"
         ],
         "numeric_type": [
            "integral_type"
         ],
         "integral_type": [
            "BYTE",
            "SHORT",
            "INT",
            "CHAR"
         ],
         "reference_type": [
            "class_or_interface_type",
            "array_type"
         ],
         "class_or_interface_type": [
            "name"
         ],
         "class_type": [
            "class_or_interface_type"
         ],
         "interface_type": [
            "class_or_interface_type"
         ],
         "array_type": [
            "primitive_type [ ]",
            "name [ ]"
         ],

         "name": [
            "simple_name",
            "qualified_name"
         ],
         "simple_name": [
            "IDENTIFIER"
         ],
         "qualified_name": [
            "name . IDENTIFIER"
         ],

         "compilation_unit": [
            "package_declaration import_declarations type_declaration"
         ],
         "import_declarations": [
            "",
            "import_declarations import_declaration"
         ],
         "package_declaration": [
            "",
            "PACKAGE name ;"
         ],
         "import_declaration": [
            "single_type_import_declaration",
            "type_import_on_demand_declaration"
         ],
         "single_type_import_declaration": [
            "IMPORT name ;"
         ],
         "type_import_on_demand_declaration": [
            "IMPORT name . * ;"
         ],
         "type_declaration": [
            "",
            "class_declaration",
            "interface_declaration",
            ";"
         ],
         "modifiers": [
            "",
            "modifiers modifier"
         ],
         "modifier": [
            "PUBLIC",
            "PROTECTED",
            "PRIVATE",
            "STATIC",
            "ABSTRACT",
            "FINAL",
            "NATIVE"

         ],
         "class_declaration": [
            "modifiers CLASS IDENTIFIER super interfaces class_body"
         ],
         "super": [
            "",
            "EXTENDS class_type"
         ],
         "interfaces": [
            "",
            "IMPLEMENTS interface_type_list"
         ],
         "interface_type_list": [
            "interface_type",
            "interface_type_list , interface_type"
         ],
         "class_body": [
            "{ class_body_declarations }"
         ],
         "class_body_declarations": [
            "",
            "class_body_declarations class_body_declaration"
         ],
         "class_body_declaration": [
            "class_member_declaration",
            "constructor_declaration"
         ],
         "class_member_declaration": [
            "field_declaration",
            "method_declaration"
         ],

         "field_declaration": [
            "modifiers type variable_declarator ;"
         ],
         "variable_declarator": [
            "variable_declarator_id",
            "variable_declarator_id = variable_initializer"
         ],
         "variable_declarator_id": [
            "IDENTIFIER"
         ],
         "variable_initializer": [
            "expression"
         ],
         "method_declaration": [
            "method_header method_body"
         ],
         "method_header": [
            "modifiers type method_declarator",
            "modifiers VOID method_declarator"
         ],
         "method_declarator": [
            "IDENTIFIER ( formal_parameter_list )"
         ],
         "formal_parameter_list": [
            "",
            "formal_parameter",
            "formal_parameter_list , formal_parameter"
         ],
         "formal_parameter": [
            "type variable_declarator_id"
         ],
         "method_body": [
            "block",
            ";"
         ],
         "constructor_declaration": [
            "modifiers constructor_declarator block"
         ],
         "constructor_declarator": [
            "simple_name ( formal_parameter_list )"
         ],
         "interface_declaration": [
            "modifiers INTERFACE IDENTIFIER extends_interfaces interface_body"
         ],
         "extends_interfaces": [
            "",
            "EXTENDS interface_type",
            "extends_interfaces , interface_type"
         ],
         "interface_body": [
            "{ interface_member_declarations }"
         ],
         "interface_member_declarations": [
            "",
            "interface_member_declarations interface_member_declaration"
         ],
         "interface_member_declaration": [
            "abstract_method_declaration"
         ],
         "abstract_method_declaration": [
            "method_header ;"
         ],
         "block": [
            "{ block_statements }"
         ],
         "block_statements": [
            "",
            "block_statements block_statement"
         ],
         "block_statement": [
            "local_variable_declaration_statement",
            "statement"
         ],
         "local_variable_declaration_statement": [
            "local_variable_declaration ;"
         ],
         "local_variable_declaration": [
            "type variable_declarator"
         ],
         "statement": [
            "statement_without_trailing_substatement",
            "if_then_statement",
            "if_then_else_statement",
            "while_statement",
            "for_statement"
         ],
         "statement_no_short_if": [
            "statement_without_trailing_substatement",
            "if_then_else_statement_no_short_if",
            "while_statement_no_short_if",
            "for_statement_no_short_if"
         ],
         "statement_without_trailing_substatement": [
            "block",
            "empty_statement",
            "expression_statement",
            "return_statement"
         ],
         "empty_statement": [
            ";"
         ],
         "expression_statement": [
            "statement_expression ;"
         ],
         "statement_expression": [
            "assignment",
            "method_invocation",
            "class_instance_creation_expression"
         ],
         "if_then_statement": [
            "IF ( expression ) statement"
         ],
         "if_then_else_statement": [
            "IF ( expression ) statement_no_short_if ELSE statement"
         ],
         "if_then_else_statement_no_short_if": [
            "IF ( expression ) statement_no_short_if ELSE statement_no_short_if"
         ],
         "while_statement": [
            "WHILE ( expression ) statement"
         ],
         "while_statement_no_short_if": [
            "WHILE ( expression ) statement_no_short_if"
         ],
         "for_statement": [
            "FOR ( for_init ; expression_opt ; for_update ) statement"
         ],
         "for_statement_no_short_if": [
            "FOR ( for_init ; expression_opt ; for_update ) statement_no_short_if"
         ],
         "expression_opt": [
            "",
            "expression"
         ],
         "for_init": [
            "",
            "statement_expression",
            "local_variable_declaration"
         ],
         "for_update": [
            "",
            "statement_expression"
         ],
         "return_statement": [
            "RETURN expression_opt ;"
         ],
         "primary": [
            "primary_no_new_array",
            "array_creation_expression"
         ],
         "primary_no_new_array": [
            "literal",
            "THIS",
            "( expression )",
            "class_instance_creation_expression",
            "field_access",
            "method_invocation",
            "array_access"
         ],
         "class_instance_creation_expression": [
            "NEW class_type ( argument_list )"
         ],
         "argument_list": [
            "",
            "argument_list , expression",
            "expression"
         ],
         "array_creation_expression": [
            "NEW primitive_type dim_exprs",
            "NEW class_or_interface_type dim_exprs"
         ],
         "dim_exprs": [
            "[ expression ]"
         ],
         "dims": [
            "[ ]"
         ],
         "field_access": [
            "primary . IDENTIFIER"
         ],
         "method_invocation": [
            "name ( argument_list )",
            "primary . IDENTIFIER ( argument_list )"
         ],
         "array_access": [
            "name [ expression ]",
            "primary_no_new_array [ expression ]"
         ],
         "postfix_expression": [
            "primary",
            "name"
         ],
         "unary_expression": [
            "- unary_expression",
            "unary_expression_not_plus_minus"
         ],
         "unary_expression_not_plus_minus": [
            "postfix_expression",
            "~ unary_expression",
            "! unary_expression",
            "cast_expression"
         ],
         "cast_expression": [
            "( primitive_type ) unary_expression",
            "( primitive_type dims ) unary_expression",
            "( expression ) unary_expression_not_plus_minus",
            "( name dims ) unary_expression_not_plus_minus"
         ],
         "multiplicative_expression": [
            "unary_expression",
            "multiplicative_expression * unary_expression",
            "multiplicative_expression / unary_expression",
            "multiplicative_expression % unary_expression"
         ],
         "additive_expression": [
            "multiplicative_expression",
            "additive_expression + multiplicative_expression",
            "additive_expression - multiplicative_expression"
         ],
         "relational_expression": [
           "shift_expression",
            "relational_expression < additive_expression",
            "relational_expression > additive_expression",
            "relational_expression <= additive_expression",
            "relational_expression >= additive_expression",
            "relational_expression INSTANCEOF reference_type"
         ],
        "shift_expression": [
          "additive_expression"
        ],
         "equality_expression": [
            "relational_expression",
            "equality_expression == relational_expression",
            "equality_expression != relational_expression"
         ],
         "and_expression": [
            "equality_expression",
            "and_expression & equality_expression"
         ],
         "exclusive_or_expression": [
            "and_expression",
            "exclusive_or_expression ^ and_expression"
         ],
         "inclusive_or_expression": [
            "exclusive_or_expression",
            "exclusive_or_expression | exclusive_or_expression"
         ],
         "conditional_and_expression": [
            "inclusive_or_expression",
            "conditional_and_expression && inclusive_or_expression"
         ],
         "conditional_or_expression": [
            "conditional_and_expression",
            "conditional_or_expression || conditional_and_expression"
         ],
         "conditional_expression": [
            "conditional_or_expression"
         ],
         "assignment_expression": [
            "conditional_expression",
            "assignment"
         ],
         "assignment": [
            "left_hand_side assignment_operator assignment_expression"
         ],
         "left_hand_side": [
            "name",
            "field_access",
            "array_access"
         ],
         "assignment_operator": [
            "="
         ],
         "expression": [
            "assignment_expression"
         ],
         "constant_expression": [
            "expression"
         ]
      }
}